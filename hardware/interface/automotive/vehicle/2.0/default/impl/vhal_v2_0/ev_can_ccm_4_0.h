/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Tue Sep  5 18:18:53 2023.
 */

#ifndef EV_CAN_CCM_4_0_H
#define EV_CAN_CCM_4_0_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define EV_CAN_CCM_4_0_VCU_0_X100_FRAME_ID (0x100u)
#define EV_CAN_CCM_4_0_VCU_MCU_111_FRAME_ID (0x111u)
#define EV_CAN_CCM_4_0_BMS_0_X120_FRAME_ID (0x120u)
#define EV_CAN_CCM_4_0_BMS_0_X125_FRAME_ID (0x125u)
#define EV_CAN_CCM_4_0_BMS_0_X130_FRAME_ID (0x130u)
#define EV_CAN_CCM_4_0_BMS_0_X135_FRAME_ID (0x135u)
#define EV_CAN_CCM_4_0_IPU_0_X160_FRAME_ID (0x160u)
#define EV_CAN_CCM_4_0_GW_ABS_171_FRAME_ID (0x171u)
#define EV_CAN_CCM_4_0_MCU_STATUS_1_200_FRAME_ID (0x200u)
#define EV_CAN_CCM_4_0_MCU_STATUS_2_201_FRAME_ID (0x201u)
#define EV_CAN_CCM_4_0_MCU_STATUS_3_202_FRAME_ID (0x202u)
#define EV_CAN_CCM_4_0_MCU_STATUS_4_203_FRAME_ID (0x203u)
#define EV_CAN_CCM_4_0_IPU_0_X450_FRAME_ID (0x450u)
#define EV_CAN_CCM_4_0_IPU_0_X470_FRAME_ID (0x470u)
#define EV_CAN_CCM_4_0_IPU_0_X471_FRAME_ID (0x471u)
#define EV_CAN_CCM_4_0_IPU_0_X472_FRAME_ID (0x472u)
#define EV_CAN_CCM_4_0_IPU_0_X490_FRAME_ID (0x490u)
#define EV_CAN_CCM_4_0_IPU_0_X491_FRAME_ID (0x491u)
#define EV_CAN_CCM_4_0_IPU_0_X500_FRAME_ID (0x500u)
#define EV_CAN_CCM_4_0_BMS_0_X510_FRAME_ID (0x510u)
#define EV_CAN_CCM_4_0_BMS_0_X511_FRAME_ID (0x511u)
#define EV_CAN_CCM_4_0_BMS_0_X512_FRAME_ID (0x512u)
#define EV_CAN_CCM_4_0_BMS_0_X520_FRAME_ID (0x520u)
#define EV_CAN_CCM_4_0_BMS_0_X522_FRAME_ID (0x522u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_FRAME_ID (0x350u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_FRAME_ID (0x351u)
#define EV_CAN_CCM_4_0_CCM_0_X353_FRAME_ID (0x353u)
#define EV_CAN_CCM_4_0_CCM_0_X354_FRAME_ID (0x354u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_FRAME_ID (0x352u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_FRAME_ID (0x215u)
#define EV_CAN_CCM_4_0_GW_ACU_133_FRAME_ID (0x133u)
#define EV_CAN_CCM_4_0_GW_EAS_221_FRAME_ID (0x221u)
#define EV_CAN_CCM_4_0_GW_VCU_250_FRAME_ID (0x250u)
#define EV_CAN_CCM_4_0_GW_AC_233_FRAME_ID (0x233u)
#define EV_CAN_CCM_4_0_VCU_610_FRAME_ID (0x610u)
#define EV_CAN_CCM_4_0_GW_AC_232_FRAME_ID (0x232u)
#define EV_CAN_CCM_4_0_GW_BCM_330_FRAME_ID (0x330u)
#define EV_CAN_CCM_4_0_CCM_310_FRAME_ID (0x310u)
#define EV_CAN_CCM_4_0_BMS_620_FRAME_ID (0x620u)
#define EV_CAN_CCM_4_0_BMS_570_FRAME_ID (0x570u)
#define EV_CAN_CCM_4_0_BMS_580_FRAME_ID (0x580u)
#define EV_CAN_CCM_4_0_BMS_590_FRAME_ID (0x590u)
#define EV_CAN_CCM_4_0_VCU_661_FRAME_ID (0x661u)
#define EV_CAN_CCM_4_0_CCM_66_C_FRAME_ID (0x66cu)
#define EV_CAN_CCM_4_0_CCM_630_FRAME_ID (0x630u)
#define EV_CAN_CCM_4_0_CCM_558_FRAME_ID (0x558u)
#define EV_CAN_CCM_4_0_BMS_313_FRAME_ID (0x313u)
#define EV_CAN_CCM_4_0_BMS_314_FRAME_ID (0x314u)
#define EV_CAN_CCM_4_0_CCM_321_FRAME_ID (0x321u)

/* Frame lengths in bytes. */
#define EV_CAN_CCM_4_0_VCU_0_X100_LENGTH (8u)
#define EV_CAN_CCM_4_0_VCU_MCU_111_LENGTH (8u)
#define EV_CAN_CCM_4_0_BMS_0_X120_LENGTH (8u)
#define EV_CAN_CCM_4_0_BMS_0_X125_LENGTH (8u)
#define EV_CAN_CCM_4_0_BMS_0_X130_LENGTH (8u)
#define EV_CAN_CCM_4_0_BMS_0_X135_LENGTH (8u)
#define EV_CAN_CCM_4_0_IPU_0_X160_LENGTH (8u)
#define EV_CAN_CCM_4_0_GW_ABS_171_LENGTH (8u)
#define EV_CAN_CCM_4_0_MCU_STATUS_1_200_LENGTH (8u)
#define EV_CAN_CCM_4_0_MCU_STATUS_2_201_LENGTH (8u)
#define EV_CAN_CCM_4_0_MCU_STATUS_3_202_LENGTH (8u)
#define EV_CAN_CCM_4_0_MCU_STATUS_4_203_LENGTH (8u)
#define EV_CAN_CCM_4_0_IPU_0_X450_LENGTH (8u)
#define EV_CAN_CCM_4_0_IPU_0_X470_LENGTH (8u)
#define EV_CAN_CCM_4_0_IPU_0_X471_LENGTH (8u)
#define EV_CAN_CCM_4_0_IPU_0_X472_LENGTH (8u)
#define EV_CAN_CCM_4_0_IPU_0_X490_LENGTH (8u)
#define EV_CAN_CCM_4_0_IPU_0_X491_LENGTH (8u)
#define EV_CAN_CCM_4_0_IPU_0_X500_LENGTH (8u)
#define EV_CAN_CCM_4_0_BMS_0_X510_LENGTH (8u)
#define EV_CAN_CCM_4_0_BMS_0_X511_LENGTH (8u)
#define EV_CAN_CCM_4_0_BMS_0_X512_LENGTH (8u)
#define EV_CAN_CCM_4_0_BMS_0_X520_LENGTH (8u)
#define EV_CAN_CCM_4_0_BMS_0_X522_LENGTH (8u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_LENGTH (8u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_LENGTH (8u)
#define EV_CAN_CCM_4_0_CCM_0_X353_LENGTH (8u)
#define EV_CAN_CCM_4_0_CCM_0_X354_LENGTH (8u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_LENGTH (8u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_LENGTH (8u)
#define EV_CAN_CCM_4_0_GW_ACU_133_LENGTH (8u)
#define EV_CAN_CCM_4_0_GW_EAS_221_LENGTH (8u)
#define EV_CAN_CCM_4_0_GW_VCU_250_LENGTH (8u)
#define EV_CAN_CCM_4_0_GW_AC_233_LENGTH (8u)
#define EV_CAN_CCM_4_0_VCU_610_LENGTH (8u)
#define EV_CAN_CCM_4_0_GW_AC_232_LENGTH (8u)
#define EV_CAN_CCM_4_0_GW_BCM_330_LENGTH (8u)
#define EV_CAN_CCM_4_0_CCM_310_LENGTH (8u)
#define EV_CAN_CCM_4_0_BMS_620_LENGTH (8u)
#define EV_CAN_CCM_4_0_BMS_570_LENGTH (8u)
#define EV_CAN_CCM_4_0_BMS_580_LENGTH (8u)
#define EV_CAN_CCM_4_0_BMS_590_LENGTH (8u)
#define EV_CAN_CCM_4_0_VCU_661_LENGTH (8u)
#define EV_CAN_CCM_4_0_CCM_66_C_LENGTH (8u)
#define EV_CAN_CCM_4_0_CCM_630_LENGTH (8u)
#define EV_CAN_CCM_4_0_CCM_558_LENGTH (8u)
#define EV_CAN_CCM_4_0_BMS_313_LENGTH (8u)
#define EV_CAN_CCM_4_0_BMS_314_LENGTH (8u)
#define EV_CAN_CCM_4_0_CCM_321_LENGTH (8u)

/* Extended or standard frame types. */
#define EV_CAN_CCM_4_0_VCU_0_X100_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_VCU_MCU_111_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_BMS_0_X120_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_BMS_0_X125_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_BMS_0_X130_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_BMS_0_X135_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_IPU_0_X160_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_GW_ABS_171_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_MCU_STATUS_1_200_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_MCU_STATUS_2_201_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_MCU_STATUS_3_202_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_MCU_STATUS_4_203_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_IPU_0_X450_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_IPU_0_X470_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_IPU_0_X471_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_IPU_0_X472_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_IPU_0_X490_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_IPU_0_X491_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_IPU_0_X500_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_BMS_0_X510_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_BMS_0_X511_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_BMS_0_X512_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_BMS_0_X520_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_BMS_0_X522_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_CCM_0_X353_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_CCM_0_X354_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_GW_ACU_133_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_GW_EAS_221_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_GW_VCU_250_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_GW_AC_233_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_VCU_610_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_GW_AC_232_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_GW_BCM_330_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_CCM_310_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_BMS_620_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_BMS_570_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_BMS_580_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_BMS_590_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_VCU_661_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_CCM_66_C_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_CCM_630_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_CCM_558_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_BMS_313_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_BMS_314_IS_EXTENDED (0)
#define EV_CAN_CCM_4_0_CCM_321_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define EV_CAN_CCM_4_0_VCU_0_X100_CYCLE_TIME_MS (10u)
#define EV_CAN_CCM_4_0_VCU_MCU_111_CYCLE_TIME_MS (10u)
#define EV_CAN_CCM_4_0_BMS_0_X120_CYCLE_TIME_MS (10u)
#define EV_CAN_CCM_4_0_BMS_0_X125_CYCLE_TIME_MS (10u)
#define EV_CAN_CCM_4_0_BMS_0_X130_CYCLE_TIME_MS (10u)
#define EV_CAN_CCM_4_0_BMS_0_X135_CYCLE_TIME_MS (500u)
#define EV_CAN_CCM_4_0_IPU_0_X160_CYCLE_TIME_MS (10u)
#define EV_CAN_CCM_4_0_GW_ABS_171_CYCLE_TIME_MS (20u)
#define EV_CAN_CCM_4_0_MCU_STATUS_1_200_CYCLE_TIME_MS (10u)
#define EV_CAN_CCM_4_0_MCU_STATUS_2_201_CYCLE_TIME_MS (10u)
#define EV_CAN_CCM_4_0_MCU_STATUS_3_202_CYCLE_TIME_MS (10u)
#define EV_CAN_CCM_4_0_MCU_STATUS_4_203_CYCLE_TIME_MS (500u)
#define EV_CAN_CCM_4_0_IPU_0_X450_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_IPU_0_X470_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_IPU_0_X471_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_IPU_0_X472_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_IPU_0_X490_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_IPU_0_X491_CYCLE_TIME_MS (500u)
#define EV_CAN_CCM_4_0_IPU_0_X500_CYCLE_TIME_MS (1000u)
#define EV_CAN_CCM_4_0_BMS_0_X510_CYCLE_TIME_MS (500u)
#define EV_CAN_CCM_4_0_BMS_0_X511_CYCLE_TIME_MS (500u)
#define EV_CAN_CCM_4_0_BMS_0_X512_CYCLE_TIME_MS (500u)
#define EV_CAN_CCM_4_0_BMS_0_X520_CYCLE_TIME_MS (500u)
#define EV_CAN_CCM_4_0_BMS_0_X522_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_CCM_0_X354_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_GW_ACU_133_CYCLE_TIME_MS (10u)
#define EV_CAN_CCM_4_0_GW_EAS_221_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_GW_VCU_250_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_GW_AC_233_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_VCU_610_CYCLE_TIME_MS (1000u)
#define EV_CAN_CCM_4_0_GW_AC_232_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_GW_BCM_330_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_CCM_310_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_BMS_620_CYCLE_TIME_MS (1000u)
#define EV_CAN_CCM_4_0_BMS_570_CYCLE_TIME_MS (500u)
#define EV_CAN_CCM_4_0_BMS_580_CYCLE_TIME_MS (500u)
#define EV_CAN_CCM_4_0_BMS_590_CYCLE_TIME_MS (500u)
#define EV_CAN_CCM_4_0_VCU_661_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_CCM_66_C_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_CCM_630_CYCLE_TIME_MS (1000u)
#define EV_CAN_CCM_4_0_CCM_558_CYCLE_TIME_MS (1000u)
#define EV_CAN_CCM_4_0_BMS_313_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_BMS_314_CYCLE_TIME_MS (100u)
#define EV_CAN_CCM_4_0_CCM_321_CYCLE_TIME_MS (100u)

/* Signal choices. */
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_D_CDISCHRG_PERM_NOT_PERMIT_CHOICE (0u)
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_D_CDISCHRG_PERM_PERMIT_CHOICE (1u)

#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_PT_ST_INIT__AFTERRUN_CHOICE (0u)
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_PT_ST_STANDBY_CHOICE (1u)
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_PT_ST_HV__READY_CHOICE (2u)
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_PT_ST_DRIVE__REMOTE__DRIVE_CHOICE (3u)
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_PT_ST_CHARGING_OR__DISCHARGING_CHOICE (4u)
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_PT_ST_DIAGNOSTIC_CHOICE (5u)

#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_HVPOWER_VOID_CHOICE (0u)
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_HVPOWER__________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_HVPOWER__________2_CHOICE (2u)

#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_DCD_CWORKENABLE_VOID_CHOICE (0u)
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_DCD_CWORKENABLE______1_CHOICE (1u)
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_DCD_CWORKENABLE______2_CHOICE (2u)

#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_CHARALLOW_VOID_CHOICE (0u)
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_CHARALLOW______________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_CHARALLOW______________2_CHOICE (2u)
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_CHARALLOW________________3_CHOICE (3u)
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_CHARALLOW________________4_CHOICE (4u)

#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_IGON_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_IGON_IG_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_SLEEPINDICATIONSIGNAL_INACTIVE_________CHOICE (0u)
#define EV_CAN_CCM_4_0_VCU_0_X100_VCU_SLEEPINDICATIONSIGNAL_ACTIVE_________CHOICE (1u)

#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_MAINRELAYNEGA_STATUS________CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_MAINRELAYNEGA_STATUS______1_CHOICE (1u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_MAINRELAYNEGA_STATUS______2_CHOICE (2u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_MAINRELAYNEGA_STATUS______3_CHOICE (3u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_MAINRELAYNEGA_STATUS__________CHOICE (4u)

#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_HEATRELAYSTATUS________CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_HEATRELAYSTATUS______1_CHOICE (1u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_HEATRELAYSTATUS______2_CHOICE (2u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_HEATRELAYSTATUS______3_CHOICE (3u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_HEATRELAYSTATUS__________CHOICE (4u)

#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_INITSTATUS_VOID_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_INITSTATUS________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_INITSTATUS________2_CHOICE (2u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_INITSTATUS____________CHOICE (3u)

#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_HV_BATT_ST_INIT_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_HV_BATT_ST_HV_STANDBY_CHOICE (1u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_HV_BATT_ST_RESERVED_CHOICE (2u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_HV_BATT_ST_HV_READY_CHOICE (3u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_HV_BATT_ST_AC_CHARGING_CHOICE (4u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_HV_BATT_ST_DC_CHARIGING_CHOICE (5u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_HV_BATT_ST_V2_V_DISCHARGING_CHOICE (6u)

#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_CC2STATUS______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X120_BMS_CC2STATUS______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_IPU_0_X160_IPU_MAINRELAYPOSISTATUS________CHOICE (0u)
#define EV_CAN_CCM_4_0_IPU_0_X160_IPU_MAINRELAYPOSISTATUS______1_CHOICE (1u)
#define EV_CAN_CCM_4_0_IPU_0_X160_IPU_MAINRELAYPOSISTATUS______2_CHOICE (2u)
#define EV_CAN_CCM_4_0_IPU_0_X160_IPU_MAINRELAYPOSISTATUS______3_CHOICE (3u)
#define EV_CAN_CCM_4_0_IPU_0_X160_IPU_MAINRELAYPOSISTATUS__________CHOICE (4u)

#define EV_CAN_CCM_4_0_IPU_0_X160_IPU_WORKSTATUS_VOID_CHOICE (0u)
#define EV_CAN_CCM_4_0_IPU_0_X160_IPU_WORKSTATUS__________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_IPU_0_X160_IPU_WORKSTATUS__________2_CHOICE (2u)
#define EV_CAN_CCM_4_0_IPU_0_X160_IPU_WORKSTATUS__________3_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_ABS_171_ABS_ABS_ACTIVE_STATUS_NOT__ACTIVE_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_ABS_171_ABS_ABS_ACTIVE_STATUS_ACTIVE_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_ABS_171_ABS_NOE_VFLAG______________________________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_ABS_171_ABS_NOE_VFLAG___________________________________________1________________100MS______0___CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_ABS_171_ABS_ABS_FAIL_STATUS_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_ABS_171_ABS_ABS_FAIL_STATUS_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_ABS_171_ABS_EBD_FAIL_STATUS_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_ABS_171_ABS_EBD_FAIL_STATUS_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_ABS_171_ABS_VEHIC_SPEEDVALID_VALID_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_ABS_171_ABS_VEHIC_SPEEDVALID_INVALID_CHOICE (1u)

#define EV_CAN_CCM_4_0_MCU_STATUS_3_202_MCU_MOTOROPERMODE_INITING_CHOICE (0u)
#define EV_CAN_CCM_4_0_MCU_STATUS_3_202_MCU_MOTOROPERMODE_READY__TO__PRECHARGE_CHOICE (1u)
#define EV_CAN_CCM_4_0_MCU_STATUS_3_202_MCU_MOTOROPERMODE_PRECHARGE_CHOICE (2u)
#define EV_CAN_CCM_4_0_MCU_STATUS_3_202_MCU_MOTOROPERMODE_STANDBY_CHOICE (3u)
#define EV_CAN_CCM_4_0_MCU_STATUS_3_202_MCU_MOTOROPERMODE_TRQ_CTL_CHOICE (4u)
#define EV_CAN_CCM_4_0_MCU_STATUS_3_202_MCU_MOTOROPERMODE_FAILURE_CHOICE (5u)
#define EV_CAN_CCM_4_0_MCU_STATUS_3_202_MCU_MOTOROPERMODE_PRE_POWER_DOWN_CHOICE (6u)
#define EV_CAN_CCM_4_0_MCU_STATUS_3_202_MCU_MOTOROPERMODE_DIS_CHARGE_CHOICE (7u)
#define EV_CAN_CCM_4_0_MCU_STATUS_3_202_MCU_MOTOROPERMODE_SPEED_CTL_CHOICE (8u)

#define EV_CAN_CCM_4_0_MCU_STATUS_4_203_MCU_MOTOR_STATE__________0_CHOICE (0u)
#define EV_CAN_CCM_4_0_MCU_STATUS_4_203_MCU_MOTOR_STATE__________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_MCU_STATUS_4_203_MCU_MOTOR_STATE__________2_CHOICE (2u)
#define EV_CAN_CCM_4_0_MCU_STATUS_4_203_MCU_MOTOR_STATE_VOID_CHOICE (3u)

#define EV_CAN_CCM_4_0_MCU_STATUS_4_203_MCU_IGBT_OVERHEAT_WARNING______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_MCU_STATUS_4_203_MCU_IGBT_OVERHEAT_WARNING______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_MCU_STATUS_4_203_MCU_MOTOR_OVERHEAT_WARNING______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_MCU_STATUS_4_203_MCU_MOTOR_OVERHEAT_WARNING______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_IPU_0_X450_IPU_SMART_DC_ST_NOT__ACTIVE_CHOICE (0u)
#define EV_CAN_CCM_4_0_IPU_0_X450_IPU_SMART_DC_ST_ACTIVE_CHOICE (1u)

#define EV_CAN_CCM_4_0_IPU_0_X470_IPU_IPUHVIL_STA______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_IPU_0_X470_IPU_IPUHVIL_STA______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_IPU_0_X470_IPU_C_CRESISTANCEVALUE________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_IPU_0_X470_IPU_C_CRESISTANCEVALUE________2_CHOICE (2u)
#define EV_CAN_CCM_4_0_IPU_0_X470_IPU_C_CRESISTANCEVALUE_1500_OHM_CHOICE (3u)
#define EV_CAN_CCM_4_0_IPU_0_X470_IPU_C_CRESISTANCEVALUE_680_OHM_CHOICE (4u)
#define EV_CAN_CCM_4_0_IPU_0_X470_IPU_C_CRESISTANCEVALUE_220_OHM_CHOICE (5u)

#define EV_CAN_CCM_4_0_IPU_0_X490_IPU_DCD_COPERATINGMODE________CHOICE (0u)
#define EV_CAN_CCM_4_0_IPU_0_X490_IPU_DCD_COPERATINGMODE____________________CHOICE (1u)
#define EV_CAN_CCM_4_0_IPU_0_X490_IPU_DCD_COPERATINGMODE______CHOICE (2u)
#define EV_CAN_CCM_4_0_IPU_0_X490_IPU_DCD_COPERATINGMODE_________________________________CHOICE (3u)
#define EV_CAN_CCM_4_0_IPU_0_X490_IPU_DCD_COPERATINGMODE________________________________CHOICE (4u)

#define EV_CAN_CCM_4_0_IPU_0_X491_IPU_DCDC_OVER_TEMP______CHOICE (0u)
#define EV_CAN_CCM_4_0_IPU_0_X491_IPU_DCDC_OVER_TEMP______________CHOICE (1u)

#define EV_CAN_CCM_4_0_BMS_0_X520_BMS_BATT_TYPE______________CHOICE (0u)

#define EV_CAN_CCM_4_0_BMS_0_X520_BMS_BATTCOOLTYPE__________CHOICE (0u)

#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_PACKUDVOLT______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_PACKUDVOLT______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_PACKOVERVOLT______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_PACKOVERVOLT______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_OVERTEMP______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_OVERTEMP______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_DELTATEMP______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_DELTATEMP______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_LOWINSRES______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_LOWINSRES______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_CELLUDVOLT______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_CELLUDVOLT______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_CELLOVERVOLT______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_CELLOVERVOLT______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_PACKLOWSOC______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_PACKLOWSOC______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_PACKFASTCHGSOC______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_PACKFASTCHGSOC______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_PACKHIGHSOC______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_PACKHIGHSOC______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_PACKOVERCHARGE______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_PACKOVERCHARGE______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_UCELLINCON______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_UCELLINCON______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_THERMALRUNAWAYALARM______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_THERMALRUNAWAYALARM______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_H_VILFAULT______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_H_VILFAULT______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_BATSYSNOTMTC______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_BMS_0_X522_BMS_BATSYSNOTMTC______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_SHIF_FAULT______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_SHIF_FAULT______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_SHIFT_POSITION_HOME_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_SHIFT_POSITION_N_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_SHIFT_POSITION_D_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_SHIFT_POSITION_R_CHOICE (3u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_SHIFT_POSITION________CHOICE (4u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_ACTUAL_GEAR________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_ACTUAL_GEAR_N_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_ACTUAL_GEAR_D_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_ACTUAL_GEAR_R_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_BP_STATUS_OFF_____CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_BP_STATUS_ON_____CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_BP_STATUS________CHOICE (2u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_PARK_FAULT______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_PARK_FAULT______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_PARK_STATE____________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_PARK_STATE__________CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_PARK_STATE________CHOICE (2u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_SWITCH_GEAR_WARN________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_SWITCH_GEAR_WARN____________________CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_SWITCH_GEAR_WARN______________CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_SWITCH_GEAR_WARN________________________________CHOICE (3u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_SWITCH_GEAR_WARN________________________CHOICE (4u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_DELAY_MON_MODE______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_DELAY_MON_MODE______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_AP_STATUS_0__CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_AP_STATUS_1__CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_AP_STATUS_100__CHOICE (100u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_AP_STATUS________CHOICE (101u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_BRK_LAMP_CTR_CMD_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_BRK_LAMP_CTR_CMD_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_LOCK_VEH_WARN________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_LOCK_VEH_WARN_______________________________CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_CREEP_STS_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_CREEP_STS_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_SINGLE_PED_STS_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_SINGLE_PED_STS_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_AP_FAULT______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_AP_FAULT______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_BP_FAULT______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_BP_FAULT______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_BRK_PDL_POS_0__CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_BRK_PDL_POS_100__CHOICE (250u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X350_VCU_BRK_PDL_POS________CHOICE (255u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRG_STS_INIT_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRG_STS_NOT_CHARGING_DISCHARGING_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRG_STS_AC_CHARGING_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRG_STS_DC_CHARGING_CHOICE (3u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRG_STS_CHARGING_COMPLETED_CHOICE (4u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRG_STS_CHARGING_ERROR_CHOICE (5u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRG_CNCTR_STS_NO_CONNECTOR_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRG_CNCTR_STS_AC_GUN_HALF_CONNECTED_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRG_CNCTR_STS_AC_GUN_CONNECTED_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRG_CNCTR_STS_DC_GUN_CONNECTED_CHOICE (3u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRG_CNCTR_STS_ERROR__AC_AND_DC_GUN_CONNECTED___CHOICE (4u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_PT_RDY_FALSE_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_PT_RDY_TRUE_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRG_SOC_TAR_SP_INIT_CHOICE (254u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRG_SOC_TAR_SP_SNA__FAULT_CHOICE (255u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_DIS_CHRG_STS_INIT_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_DIS_CHRG_STS_V2_V_DISCHARGING_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_DIS_CHRG_STS_V2_V_DISCHARGING_ERROR_CHOICE (2u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_DC_CHRG_RLY_STS______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_DC_CHRG_RLY_STS______1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_DC_CHRG_RLY_STS______2_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_DC_CHRG_RLY_STS__________CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_AVERAGE_ENERGY_CONSUM_VD______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_AVERAGE_ENERGY_CONSUM_VD______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_DC_CHRG_RLY_AUXIL_CNTAC_STS______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_DC_CHRG_RLY_AUXIL_CNTAC_STS______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_BRAKING_REMIND________0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_BRAKING_REMIND________1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_SMART_DC_REQ_NO__REQUEST_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_SMART_DC_REQ_REQUEST_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_INSTANT_ENERGY_CONSUM_VD______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_INSTANT_ENERGY_CONSUM_VD______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRAGING_MODE_SP_NO__REQUEST_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRAGING_MODE_SP__________________________CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRAGING_MODE_SP______________CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X351_VCU_CHRAGING_MODE_SP_RESERVED_CHOICE (3u)

#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_VEH_TAR_SOC_INIT_CHOICE (254u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_VEH_TAR_SOC_SNA__FAULT_CHOICE (255u)

#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_BATT_MAINTAIN_CTR_CMD____________CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_BATT_MAINTAIN_CTR_CMD__________CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_0_X353_OTA_MODEL___OTA_____CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X353_OTA_MODEL_OTA_____CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_RECHRGN_LV_REQ_NO_HV_ACTIVE_REQUEST_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_RECHRGN_LV_REQ_HV_ACTIVE_REQUEST_CHOICE (1u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_RECHRGN_LV_REQ_RESERVED_2_CHOICE (2u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_RECHRGN_LV_REQ_RESERVED_3_CHOICE (3u)

#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_DRIVER_BUCKLE_STATUS____________0_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_DRIVER_BUCKLE_STATUS____________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_DRIVER_BUCKLE_STATUS________CHOICE (2u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_DRIVER_BUCKLE_STATUS______CHOICE (3u)

#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_DRIVE_MODE_REQ________CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_DRIVE_MODE_REQ_SPORT_CHOICE (1u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_DRIVE_MODE_REQ_NORMAL_CHOICE (2u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_DRIVE_MODE_REQ_ECO_CHOICE (3u)

#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_OPERAT_LICENCE__________0_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_OPERAT_LICENCE__________1_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_VERSION____________CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_VERSION__________CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_SPEED_LIMIT_LEVEL________CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_SPEED_LIMIT_LEVEL__________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_SPEED_LIMIT_LEVEL__________2_CHOICE (2u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_SPEED_LIMIT_LEVEL__________3_CHOICE (3u)

#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_CHARGING_CONDITIONS______________CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_CHARGING_CONDITIONS________________CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_BATT_MAINTAIN_STS________0_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_BATT_MAINTAIN_STS________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_BATT_MAINTAIN_STS__________2_CHOICE (2u)
#define EV_CAN_CCM_4_0_CCM_0_X353_CCM_BATT_MAINTAIN_STS__________3_CHOICE (3u)

#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_REMT_CTRL_FLAG_NO_REQUEST_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_REMT_CTRL_FLAG_OFF__VCU____________AC_______CHOICE (1u)
#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_REMT_CTRL_FLAG_ON__VCU____________AC_______CHOICE (2u)

#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_CHARGING_REQUEST_NO__REQUEST_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_CHARGING_REQUEST__________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_CHARGING_REQUEST__________2_CHOICE (2u)
#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_CHARGING_REQUEST_RESERVED_CHOICE (3u)

#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_CHRAGING_MODE_NO__REQUEST_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_CHRAGING_MODE__________________________CHOICE (1u)
#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_CHRAGING_MODE______________CHOICE (2u)
#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_CHRAGING_MODE_RESERVED_CHOICE (3u)

#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_ENERGY_RECOV_LEVEL_CMD_0__CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_ENERGY_RECOV_LEVEL_CMD_100__CHOICE (250u)
#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_ENERGY_RECOV_LEVEL_CMD________CHOICE (255u)

#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_CREEP_CTR_CMD_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_CREEP_CTR_CMD_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_SINGLE_PED_CTR_CMD_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_SINGLE_PED_CTR_CMD_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_REMA_RANGE_DISP_VD______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_0_X354_CCM_REMA_RANGE_DISP_VD______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_DRIVE_MODE________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_DRIVE_MODE_SPORT_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_DRIVE_MODE_NORMAL_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_DRIVE_MODE_ECO_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_LOW_SOC_WARN______CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_LOW_SOC_WARN________________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_LOW_SOC_WARN________________2_CHOICE (2u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_CAN_TIMEOUT_FAULT______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_CAN_TIMEOUT_FAULT______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_EAS_INS_STA______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_EAS_INS_STA______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULTLEVEL________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULTLEVEL__________________CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULTLEVEL______________________2_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULTLEVEL______________________3_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_DC_DISCHARGING_FAIL_WARN________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_DC_DISCHARGING_FAIL_WARN______CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_DC_CHARGING_FAIL_WARN________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_DC_CHARGING_FAIL_WARN______CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_AC_CHARGING_FAIL_WARN________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_AC_CHARGING_FAIL_WARN______CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_12_V_CHARGING_FAIL_WARN________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_12_V_CHARGING_FAIL_WARN______CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_BRAK_SYS_WARN________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_BRAK_SYS_WARN______CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_VEH_UNABLE_DRI_WARN________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_VEH_UNABLE_DRI_WARN______CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_BRK_LIQUID_LEVEL_LOW______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_BRK_LIQUID_LEVEL_LOW______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_VACUM_PUMP_FAULT______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_VACUM_PUMP_FAULT______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MOT_WATER_PUMP_STATUS____________0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MOT_WATER_PUMP_STATUS_PWM____________________80_____________CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MOT_WATER_PUMP_STATUS_PWM______________VBAT______________CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MOT_WATER_PUMP_STATUS____________3_CHOICE (3u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MOT_WATER_PUMP_STATUS____________4_CHOICE (4u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MOT_WATER_PUMP_STATUS_________________CHOICE (5u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MOT_WATER_PUMP_STATUS____________6_CHOICE (6u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MOT_WATER_PUMP_STATUS__________CHOICE (7u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MOT_WATER_PUMP_STATUS________CHOICE (8u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MOT_WATER_PUMP_STATUS_PWM____________________20___________CHOICE (9u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MOT_WATER_PUMP_STATUS_PWM________GND____________CHOICE (10u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MOT_WATER_PUMP_STATUS______11_CHOICE (11u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MOT_WATER_PUMP_STATUS______12_CHOICE (12u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MOT_WATER_PUMP_STATUS______13_CHOICE (13u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MOT_WATER_PUMP_STATUS______14_CHOICE (14u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MOT_WATER_PUMP_STATUS______15_CHOICE (15u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULT_TREAT_LEVEL________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULT_TREAT_LEVEL__________CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULT_TREAT_LEVEL________________2_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULT_TREAT_LEVEL_____________1_CHOICE (3u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULT_TREAT_LEVEL_____________2_CHOICE (4u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULT_TREAT_LEVEL_____________3_CHOICE (5u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULT_TREAT_LEVEL________________6_CHOICE (6u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULT_TREAT_LEVEL________________7_CHOICE (7u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULT_TREAT_LEVEL________________8_CHOICE (8u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULT_TREAT_LEVEL________________9_CHOICE (9u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULT_TREAT_LEVEL______10_CHOICE (10u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULT_TREAT_LEVEL______11_CHOICE (11u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULT_TREAT_LEVEL______12_CHOICE (12u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULT_TREAT_LEVEL______13_CHOICE (13u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULT_TREAT_LEVEL______14_CHOICE (14u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_FAULT_TREAT_LEVEL______15_CHOICE (15u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_DRIVE_PWR_LIM_NO_LIMIT_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_DRIVE_PWR_LIM_LIMIT_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MCU_ERR______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_MCU_ERR______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_HV_BATT_ERR______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_HV_BATT_ERR______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_OPERAT_LICENCE______________0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_OPERAT_LICENCE______________1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_VERSION____________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_VERSION__________CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_SPEED_LIMIT_LEVEL________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_SPEED_LIMIT_LEVEL__________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_SPEED_LIMIT_LEVEL__________2_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_SPEED_LIMIT_LEVEL__________3_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_CHARGING_CONDITIONS________________0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X352_VCU_CHARGING_CONDITIONS________________1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_COMP_NEG_REL_STA________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_COMP_NEG_REL_STA______1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_COMP_NEG_REL_STA______2_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_COMP_NEG_REL_STA______3_CHOICE (3u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_COMP_NEG_REL_STA__________CHOICE (4u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_COMP_POS_REL_STA________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_COMP_POS_REL_STA______1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_COMP_POS_REL_STA______2_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_COMP_POS_REL_STA______3_CHOICE (3u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_COMP_POS_REL_STA__________CHOICE (4u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_IPU_ERR______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_IPU_ERR______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_COOLING_FAIL_WARN______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_COOLING_FAIL_WARN______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_LV_ELEC_SYS_ERR______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_LV_ELEC_SYS_ERR______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_AC_HV_SYS_ERR______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_AC_HV_SYS_ERR______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_PTC2_REL_STA________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_PTC2_REL_STA______1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_PTC2_REL_STA______2_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_PTC2_REL_STA______3_CHOICE (3u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_PTC2_REL_STA__________CHOICE (4u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_PTC1_REL_STA________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_PTC1_REL_STA______1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_PTC1_REL_STA______2_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_PTC1_REL_STA______3_CHOICE (3u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_PTC1_REL_STA__________CHOICE (4u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_FAN_RELAY_PIN_STS______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_FAN_RELAY_PIN_STS______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_WATER_PUMP_RELAY_PIN_STS______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_WATER_PUMP_RELAY_PIN_STS______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_AWAKE_OBC_PIN_STS______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_AWAKE_OBC_PIN_STS______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_AWAKE_BMS_PIN_STS______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_AWAKE_BMS_PIN_STS______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_AWAKE_MCU_PIN_STS______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_AWAKE_MCU_PIN_STS______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_MAIN_RELAY_PIN_STS______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_MAIN_RELAY_PIN_STS______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_DC_CHRG_AWAKE_PIN_STS______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_DC_CHRG_AWAKE_PIN_STS______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_AC_CHRG_AWAKE_PIN_STS______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_0_X215_VCU_AC_CHRG_AWAKE_PIN_STS______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_ACU_133_ACU_GSENSOR_FAULT______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_ACU_133_ACU_GSENSOR_FAULT______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_ACU_133_ACU_SYSTEM_STS_INITIALIZE_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_ACU_133_ACU_SYSTEM_STS_STANDBY_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_ACU_133_ACU_SYSTEM_STS_RUNNING_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_ACU_133_ACU_SYSTEM_STS_FAULT_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_ACU_133_ACU_AIRB_WARN_LAMP_ST_AIRBAG_WARNING__LAMP_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_ACU_133_ACU_AIRB_WARN_LAMP_ST_AIRBAG_WARNING__LAMP_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_ACU_133_ACU_CRASH_OUTP_STS_NO_CRASH_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_ACU_133_ACU_CRASH_OUTP_STS_CRASH_HAPPEN_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_EASHVIL_STA______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_EASHVIL_STA______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_CRTSTS__________0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_CRTSTS__________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_CRTSTS__________2_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_CRTSTS_RESERVED_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_CTRLRSTS________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_CTRLRSTS__________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_CTRLRSTS__________2_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_CTRLRSTS_ADC_____CHOICE (3u)
#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_CTRLRSTS__________4_CHOICE (4u)
#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_CTRLRSTS__________5_CHOICE (5u)
#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_CTRLRSTS____________________CHOICE (6u)
#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_CTRLRSTS__________16_CHOICE (16u)
#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_CTRLRSTS__________32_CHOICE (32u)
#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_CTRLRSTS__________64_CHOICE (64u)
#define EV_CAN_CCM_4_0_GW_EAS_221_EAS_CTRLRSTS_INVALID_CHOICE (255u)

#define EV_CAN_CCM_4_0_GW_VCU_250_VCU_MID_DOOR_AJAR_STATUS_CLOSE_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_250_VCU_MID_DOOR_AJAR_STATUS_OPEN_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_250_VCU_ACTUAL_REMA_RANGE_VD______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_250_VCU_ACTUAL_REMA_RANGE_VD______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_250_VCU_CLTC_REMA_RANGE_VD______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_250_VCU_CLTC_REMA_RANGE_VD______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_250_VCU_PT_CENABLE_DISABLE_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_250_VCU_PT_CENABLE_ENABLE_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_VCU_250_VCU_ACCMENABLE_DISABLE_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_VCU_250_VCU_ACCMENABLE_ENABLE_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_AC_233_AC_EVAPORATORTEMP_FAILURE________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_EVAPORATORTEMP_FAILURE__________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_EVAPORATORTEMP_FAILURE__________2_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_EVAPORATORTEMP_FAILURE_INVALID_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_AC_233_AC_OVER_VOLTAGE_PROTECTION____________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_OVER_VOLTAGE_PROTECTION__________CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_OVER_VOLTAGE_PROTECTION_RESERVED_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_OVER_VOLTAGE_PROTECTION_INVALID_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_AC_233_AC_UNDER_VOLTAGE_PROTECTION____________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_UNDER_VOLTAGE_PROTECTION__________CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_UNDER_VOLTAGE_PROTECTION_RESERVED_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_UNDER_VOLTAGE_PROTECTION_INVALID_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_AC_233_AC_BLOWER_FAILURE________0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_BLOWER_FAILURE________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_BLOWER_FAILURE_RESERVED_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_BLOWER_FAILURE_INVALID_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_AC_233_AC_AI_RDISTRIBUTION_MODE_FAILURE________0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_AI_RDISTRIBUTION_MODE_FAILURE________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_AI_RDISTRIBUTION_MODE_FAILURE_RESERVED_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_AI_RDISTRIBUTION_MODE_FAILURE_INVALID_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_AC_233_AC_FAULT_STATUS______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_FAULT_STATUS______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_AC_233_AC_PTC_OVER_HEAT________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_PTC_OVER_HEAT______________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_PTC_OVER_HEAT______________2_CHOICE (2u)

#define EV_CAN_CCM_4_0_GW_AC_233_AC_PT_CTEMP_FAILURE________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_PT_CTEMP_FAILURE__________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_PT_CTEMP_FAILURE__________2_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_PT_CTEMP_FAILURE_INVALID_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_AC_233_AC_PTCP_POWER_REQ_0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_PTCP_POWER_REQ_1000_W_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_PTCP_POWER_REQ_2000_W_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_PTCP_POWER_REQ_3000_W_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_AC_233_AC_PRESS_SWTICH_STATE______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_233_AC_PRESS_SWTICH_STATE______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_AC_232_AC_BLOWER_LEVEL_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_BLOWER_LEVEL_BLOWER__LEVEL_1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_BLOWER_LEVEL_BLOWER__LEVEL_2_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_BLOWER_LEVEL_BLOWER__LEVEL_3_CHOICE (3u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_BLOWER_LEVEL_BLOWER__LEVEL_4_CHOICE (4u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_BLOWER_LEVEL_BLOWER__LEVEL_5_CHOICE (5u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_BLOWER_LEVEL_BLOWER__LEVEL_6_CHOICE (6u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_BLOWER_LEVEL_BLOWER__LEVEL_7_CHOICE (7u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_BLOWER_LEVEL_RESERVED_8_CHOICE (8u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_BLOWER_LEVEL_RESERVED_9_CHOICE (9u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_BLOWER_LEVEL_INVALID_CHOICE (15u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_BLOWER_LEVEL_RESERVED_16_CHOICE (16u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_BLOWER_LEVEL_RESERVED_17_CHOICE (17u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_BLOWER_LEVEL_RESERVED_18_CHOICE (18u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_BLOWER_LEVEL_RESERVED_19_CHOICE (19u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_BLOWER_LEVEL_RESERVED_20_CHOICE (20u)

#define EV_CAN_CCM_4_0_GW_AC_232_AC_FAN_REQ_DISABLE_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_FAN_REQ_ENABLE_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_AC_232_AC_FRESH_RECI_STATE_FRESH________CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_FRESH_RECI_STATE_RECIRCULATION________CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_FRESH_RECI_STATE_RESERVED______CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_FRESH_RECI_STATE_INVALID______CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_AC_232_AC_FRONT_DEFROST_STATE_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_FRONT_DEFROST_STATE_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_AC_232_AC_HEAT_STATE_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_HEAT_STATE_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_AC_232_AC_HAVC_STATE_NO__COMMAND_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_HAVC_STATE_OFF_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_HAVC_STATE_ON_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_HAVC_STATE_INVALID_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_AC_232_AC_AI_RDISTRIBUTION_MODE_FACE______CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_AI_RDISTRIBUTION_MODE_BILEVEL__________CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_AI_RDISTRIBUTION_MODE_FOOT______CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_AI_RDISTRIBUTION_MODE_FOOT__SCREEN__________CHOICE (3u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_AI_RDISTRIBUTION_MODE_SCREEN______CHOICE (4u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_AI_RDISTRIBUTION_MODE_RESERVED______5_CHOICE (5u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_AI_RDISTRIBUTION_MODE_RESERVED______6_CHOICE (6u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_AI_RDISTRIBUTION_MODE_INVALID______CHOICE (7u)

#define EV_CAN_CCM_4_0_GW_AC_232_AC_A_CSTATE_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_A_CSTATE_ON_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_A_CSTATE_RESERVED_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_A_CSTATE_INVALID_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_AC_232_AC_LEFT_SET_TEMPERATURE_L_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_LEFT_SET_TEMPERATURE_2_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_LEFT_SET_TEMPERATURE_3_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_LEFT_SET_TEMPERATURE_4_CHOICE (3u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_LEFT_SET_TEMPERATURE_5_CHOICE (4u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_LEFT_SET_TEMPERATURE_6_CHOICE (5u)
#define EV_CAN_CCM_4_0_GW_AC_232_AC_LEFT_SET_TEMPERATURE_H_CHOICE (6u)

#define EV_CAN_CCM_4_0_GW_AC_232_AC_FAN_PWM_INVALID_CHOICE (255u)

#define EV_CAN_CCM_4_0_GW_AC_232_AC_FAN_FEED_BACK_VOLTAGE_INVALID_CHOICE (255u)

#define EV_CAN_CCM_4_0_GW_AC_232_AC_EVAPORATOR_TEMP_INVALID_CHOICE (255u)

#define EV_CAN_CCM_4_0_GW_AC_232_AC_PT_CTEMP_INVALID_CHOICE (2047u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_POSITION_LIGHT_STATUS_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_POSITION_LIGHT_STATUS_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_HIGH_BEAM_STATUS_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_HIGH_BEAM_STATUS_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_LOW_BEAM_STATUS_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_LOW_BEAM_STATUS_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_TURN_INDCR_RI_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_TURN_INDCR_RI_ON_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_TURN_INDCR_RI_ERROR_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_TURN_INDCR_RI_RESERVE_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_TURN_INDCR_LE_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_TURN_INDCR_LE_ON_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_TURN_INDCR_LE_ERROR_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_TURN_INDCR_LE_RESERVE_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_HAZARD_LIGHT_STATUS_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_HAZARD_LIGHT_STATUS_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_POSITION_LIGHT_WARNING______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_POSITION_LIGHT_WARNING______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_RR_DOOR_AJAR_STATUS_CLOSE_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_RR_DOOR_AJAR_STATUS_OPEN_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_FR_DOOR_AJAR_STATUS_CLOSE_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_FR_DOOR_AJAR_STATUS_OPEN_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_FL_DOOR_AJAR_STATUS_CLOSE_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_FL_DOOR_AJAR_STATUS_OPEN_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_REAR_FOG_LIGHT_STATUS_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_REAR_FOG_LIGHT_STATUS_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_TR_CLS_ST_CLOSE_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_TR_CLS_ST_OPEN_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_REMOTE_CAR_SEARCH_ST_INVALID_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_REMOTE_CAR_SEARCH_ST_NOT_ALLOWED_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_REMOTE_CAR_SEARCH_ST_EXECUTING_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_REMOTE_CAR_SEARCH_ST_FINISHED_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_POWER_STS_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_POWER_STS_ACC_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_POWER_STS_ON_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_POWER_STS_START_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_CCM_OPEN_DOOR_WARN_FEED_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_CCM_OPEN_DOOR_WARN_FEED_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_DTC_FAULT_STATUS______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_DTC_FAULT_STATUS______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_VEH_ALRM_SYS_ST_UNSET_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_VEH_ALRM_SYS_ST_PRESET_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_VEH_ALRM_SYS_ST_SET_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_VEH_ALRM_SYS_ST_ALARM_CHOICE (3u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_DRIVELOCK_ST_UNLOCK_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_DRIVELOCK_ST_LOCK_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_REVERSINGLIGHT_ST_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_REVERSINGLIGHT_ST_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_BRAKELIGHT_ST_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_BRAKELIGHT_ST_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_INTERIORLIGHT_ST_OFF_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_INTERIORLIGHT_ST_ON_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_RIGHT_MIRROR_SET_ACK______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_RIGHT_MIRROR_SET_ACK____1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_RIGHT_MIRROR_SET_ACK____2_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_RIGHT_MIRROR_SET_ACK____3_CHOICE (3u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_RIGHT_MIRROR_SET_ACK____4_CHOICE (4u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_RIGHT_MIRROR_SET_ACK______5_CHOICE (5u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_RIGHT_MIRROR_SET_ACK______6_CHOICE (6u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_RIGHT_MIRROR_SET_ACK______7_CHOICE (7u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_LEFT_MIRROR_SET_ACK______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_LEFT_MIRROR_SET_ACK____1_CHOICE (1u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_LEFT_MIRROR_SET_ACK____2_CHOICE (2u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_LEFT_MIRROR_SET_ACK____3_CHOICE (3u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_LEFT_MIRROR_SET_ACK____4_CHOICE (4u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_LEFT_MIRROR_SET_ACK______5_CHOICE (5u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_LEFT_MIRROR_SET_ACK______6_CHOICE (6u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_LEFT_MIRROR_SET_ACK______7_CHOICE (7u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_PARK_UN_LOCK_ACK______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_PARK_UN_LOCK_ACK______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_AUTO_LOCK_ACK______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_AUTO_LOCK_ACK______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_AUTO_UNLOCK_ACK______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_GW_BCM_330_BCM_AUTO_UNLOCK_ACK______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_310_CCM_A_CKEY_NO__COMMAND_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_310_CCM_A_CKEY_OFF_CHOICE (1u)
#define EV_CAN_CCM_4_0_CCM_310_CCM_A_CKEY_ON_CHOICE (2u)
#define EV_CAN_CCM_4_0_CCM_310_CCM_A_CKEY_INVALID_CHOICE (3u)

#define EV_CAN_CCM_4_0_CCM_310_CCM_AC_HAVC_STATE_NO__COMMAND_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_310_CCM_AC_HAVC_STATE_OFF_CHOICE (1u)
#define EV_CAN_CCM_4_0_CCM_310_CCM_AC_HAVC_STATE_ON_CHOICE (2u)
#define EV_CAN_CCM_4_0_CCM_310_CCM_AC_HAVC_STATE_INVALID_CHOICE (3u)

#define EV_CAN_CCM_4_0_BMS_580_B2_V_T_FRAME_NO_INVALID_CHOICE (255u)

#define EV_CAN_CCM_4_0_BMS_580_B2_V_T_CELL_TEMP_N1_INVALID_CHOICE (255u)

#define EV_CAN_CCM_4_0_BMS_580_B2_V_T_CELL_TEMP_N2_INVALID_CHOICE (255u)

#define EV_CAN_CCM_4_0_BMS_580_B2_V_T_CELL_TEMP_N3_INVALID_CHOICE (255u)

#define EV_CAN_CCM_4_0_BMS_580_B2_V_T_CELL_TEMP_N4_INVALID_CHOICE (255u)

#define EV_CAN_CCM_4_0_BMS_580_B2_V_T_CELL_TEMP_N5_INVALID_CHOICE (255u)

#define EV_CAN_CCM_4_0_BMS_580_B2_V_T_CELL_TEMP_N6_INVALID_CHOICE (255u)

#define EV_CAN_CCM_4_0_BMS_580_B2_V_T_CELL_TEMP_N7_INVALID_CHOICE (255u)

#define EV_CAN_CCM_4_0_VCU_661_VCU_WORK_REQ________CHOICE (0u)
#define EV_CAN_CCM_4_0_VCU_661_VCU_WORK_REQ____________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_VCU_661_VCU_WORK_REQ____________2_CHOICE (2u)

#define EV_CAN_CCM_4_0_CCM_66_C_STR_WORK_REQ________CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_66_C_STR_WORK_REQ____________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_CCM_66_C_STR_WORK_REQ____________2_CHOICE (2u)

#define EV_CAN_CCM_4_0_CCM_66_C_CCM_NM_BIT________CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_66_C_CCM_NM_BIT__________1_CHOICE (1u)
#define EV_CAN_CCM_4_0_CCM_66_C_CCM_NM_BIT__________2_CHOICE (2u)

#define EV_CAN_CCM_4_0_CCM_630_TBOX_TIME_STATUS______0_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_630_TBOX_TIME_STATUS______1_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_TBOX_CPU_TEMPERATURE_LOW_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_TBOX_CPU_TEMPERATURE_LOW_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_TBOX_CPU_TEMPERATURE_HIGH_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_TBOX_CPU_TEMPERATURE_HIGH_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_PCB_TEMPERATURE_LOW_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_PCB_TEMPERATURE_LOW_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_PCB_TEMPERATURE_HIGH_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_PCB_TEMPERATURE_HIGH_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_MAIN_POWER_SUPPLY_VOLTAHE_LOW_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_MAIN_POWER_SUPPLY_VOLTAHE_LOW_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_MAIN_POWER_SUPPLY_VOLTAHE_HIGH_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_MAIN_POWER_SUPPLY_VOLTAHE_HIGH_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_SIM_CARD_NOT_PRESENT_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_SIM_CARD_NOT_PRESENT_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_WIFI_DEVICE_LOST_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_WIFI_DEVICE_LOST_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_CCM_DETECTS_EAS_NODE_LOSS_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_CCM_DETECTS_EAS_NODE_LOSS_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_CCM_DETECTS_BMS_NODE_LOSS_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_CCM_DETECTS_BMS_NODE_LOSS_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_CCM_DETECTS_IPU_NODE_LOSS_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_CCM_DETECTS_IPU_NODE_LOSS_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_CCM_DETECTS_VCU_NODE_LOSS_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_CCM_DETECTS_VCU_NODE_LOSS_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_PRIVATE_CAN3_BUS_OFF_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_PRIVATE_CAN3_BUS_OFF_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_PRIVATE_CAN2_BUS_OFF_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_PRIVATE_CAN2_BUS_OFF_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_PRIVATE_CAN1_BUS_OFF_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_PRIVATE_CAN1_BUS_OFF_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_DETECT_BACKUP_BATTERY_LOST_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_DETECT_BACKUP_BATTERY_LOST_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_CCM_DETECTS_ACU_NODE_LOSS_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_CCM_DETECTS_ACU_NODE_LOSS_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_CCM_DETECTS_BCM_NODE_LOSS_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_CCM_DETECTS_BCM_NODE_LOSS_ERROR_CHOICE (1u)

#define EV_CAN_CCM_4_0_CCM_321_CCM_DETECTS_AC_NODE_LOSS_NO_ERROR_CHOICE (0u)
#define EV_CAN_CCM_4_0_CCM_321_CCM_DETECTS_AC_NODE_LOSS_ERROR_CHOICE (1u)

/**
 * Signals in message VCU_0X100.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_vcu_0_x100_t {
    /**
     * DC discharge permission
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_d_cdischrg_perm;

    /**
     * current operating state of the powertrain (e.g. Sleep, Standby, HV ready, Drive, HV charging)
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_pt_st;

    /**
     * ¸ßÑ¹Ö¸Áî
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_hvpower;

    /**
     * DCDC¹¤×÷Ê¹ÄÜ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_dcd_cworkenable;

    /**
     * ³äµçÔÊÐí
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_charallow;

    /**
     * IGON
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_igon;

    /**
     * Ë¯ÃßÖ¸Áî
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_sleepindicationsignal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_livecounter_0x100;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_checksum_0x100;
};

/**
 * Signals in message VCU_MCU_111.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_vcu_mcu_111_t {
    /**
     * µç»úÅ¤¾ØÇëÇó
     *
     * Range: 0..65535 (-500..6053.5 Nm)
     * Scale: 0.1
     * Offset: -500
     */
    uint16_t vcu_tqreq;
};

/**
 * Signals in message BMS_0X120.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_bms_0_x120_t {
    /**
     * Ö÷¸º¼ÌµçÆ÷×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_mainrelaynega_status;

    /**
     * ¼ÓÈÈ¼ÌµçÆ÷×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_heatrelaystatus;

    /**
     * BMS³õÊ¼»¯×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_initstatus;

    /**
     * HV battery state
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_batt_st;

    /**
     * CC2×´Ì¬ÐÅºÅ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cc2status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_livecounter_0x120;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_checksum_0x120;
};

/**
 * Signals in message BMS_0X125.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_bms_0_x125_t {
    /**
     * ¶¯Á¦µç³Ø¾øÔµµç×è
     *
     * Range: 0..1023 (0..5115 k¦¸)
     * Scale: 5
     * Offset: 0
     */
    uint16_t bms_batinsulatresistance;

    /**
     * ¶¯Á¦µç³ØµçÁ÷
     *
     * Range: 0..16383 (-500..1138.3 A)
     * Scale: 0.1
     * Offset: -500
     */
    uint16_t bms_batterycurrent;

    /**
     * PACKµçÑ¹
     *
     * Range: 0..1023 (0..1023 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_packvoltage;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_livecounter_0x125;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_checksum_0x125;
};

/**
 * Signals in message BMS_0X130.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_bms_0_x130_t {
    /**
     * ÊµÊ±ÐíÓÃ·Åµç¹¦ÂÊ
     *
     * Range: 0..4095 (0..409.5 Kw)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_realtimealowdischapower;
};

/**
 * Signals in message BMS_0X135.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_bms_0_x135_t {
    /**
     * Ê£ÓàÄÜÁ¿
     *
     * Range: 0..1023 (0..102.3 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_soe;

    /**
     * Ê£Óà³äµçÊ±¼ä
     *
     * Range: 0..65535 (0..65535 min)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_remainingchargetime;

    /**
     * ¶¯Á¦µç³ØÊ£ÓàµçÁ¿SOC
     *
     * Range: 0..1023 (0..102.3 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_batterysoc;

    /**
     * ¶¯Á¦µç³Ø½¡¿µ×´Ì¬SOH
     *
     * Range: 0..1023 (0..102.3 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_batterysoh;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_livecounter_0x135;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_checksum_0x135;
};

/**
 * Signals in message IPU_0X160.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_ipu_0_x160_t {
    /**
     * Ö÷Õý¼ÌµçÆ÷×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipu_mainrelayposistatus;

    /**
     * IPU¹¤×÷Ä£Ê½
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipu_workstatus;
};

/**
 * Signals in message GW_ABS_171.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_gw_abs_171_t {
    /**
     * ABS¹¤×÷×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_abs_active_status;

    /**
     * ABSÍË³öÄÜÁ¿»ØÊÕ¹¦ÄÜ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_noe_vflag;

    /**
     * ABS¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_abs_fail_status;

    /**
     * EBD¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_ebd_fail_status;

    /**
     * ³µËÙÓÐÐ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_vehic_speedvalid;

    /**
     * ³µËÙÐÅºÅ
     *
     * Range: 0..8191 (0..460.74375 km/h)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t abs_vehicl_speed;

    /**
     * Ñ­»·¼ÆÊýÆ÷
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_llivecounter_0x171;

    /**
     * CheckSumÐ£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_checksum_0x171;
};

/**
 * Signals in message MCU_STATUS_1_200.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_mcu_status_1_200_t {
    /**
     * µç»úÅ¤¾Ø
     *
     * Range: 0..4095 (-500..1547.5 Nm)
     * Scale: 0.5
     * Offset: -500
     */
    uint16_t mcu_motortorque;

    /**
     * µç»ú×ªËÙ
     *
     * Range: 0..65535 (-15000..50535 rpm)
     * Scale: 1
     * Offset: -15000
     */
    uint16_t mcu_motorspd;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_llivecounter_0x200;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_checksum_0x200;
};

/**
 * Signals in message MCU_STATUS_2_201.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_mcu_status_2_201_t {
    /**
     * MCUÄ¸ÏßµçÁ÷
     *
     * Range: 0..4095 (-500..3595 A)
     * Scale: 1
     * Offset: -500
     */
    uint16_t mcu_buscurrent;

    /**
     * MCUÄ¸ÏßµçÑ¹
     *
     * Range: 0..4095 (0..4095 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t mcu_busvolt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_llivecounter_0x201;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_checksum_0x201;
};

/**
 * Signals in message MCU_STATUS_3_202.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_mcu_status_3_202_t {
    /**
     * MCU¹ÊÕÏÂë
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t mcu_err_code;

    /**
     * µç»úÎÂ¶È
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t mcu_motortemp;

    /**
     * IGBTÎÂ¶È
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t mcu_igbttemp;

    /**
     * MCU¹¤×÷Ä£Ê½
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_motoropermode;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_llivecounter_0x202;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_checksum_0x202;
};

/**
 * Signals in message MCU_STATUS_4_203.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_mcu_status_4_203_t {
    /**
     * Çý¶¯µç»ú¹ÊÕÏ×ÜÊý
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_motor_fault_total_num;

    /**
     * Çý¶¯µç»úµ±Ç°×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_motor_state;

    /**
     * ¿ØÖÆÆ÷ÎÂ¶È±¨¾¯
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_igbt_overheat_warning;

    /**
     * µç»úÎÂ¶È±¨¾¯
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_motor_overheat_warning;

    /**
     * ¼ÆÊý
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_llivecounter_0x203;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_checksum_0x203;
};

/**
 * Signals in message IPU_0X450.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_ipu_0_x450_t {
    /**
     * Smart DC status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipu_smart_dc_st;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipu_livecounter_0x450;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipu_checksum_0x450;
};

/**
 * Signals in message IPU_0X470.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_ipu_0_x470_t {
    /**
     * IPU»¥Ëø¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipu_ipuhvil_sta;

    /**
     * OBCÊä³öµçÑ¹
     *
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ipu_obc_output_voltage;

    /**
     * OBCÊä³öµçÁ÷
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ipu_obc_output_current;

    /**
     * CCµç×èÖµ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipu_c_cresistancevalue;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipu_livecounter_0x470;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipu_checksum_0x470;
};

/**
 * Signals in message IPU_0X471.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_ipu_0_x471_t {
    /**
     * CPÕ¼¿Õ±È
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipu_c_pdutycycle;

    /**
     * OBCÊäÈëµçÑ¹
     *
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ipu_ob_cinputvoltage;
};

/**
 * Signals in message IPU_0X472.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_ipu_0_x472_t {
    /**
     * OBCÊäÈëµçÁ÷
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ipu_ob_cinputcurrent;
};

/**
 * Signals in message IPU_0X490.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_ipu_0_x490_t {
    /**
     * DCDCÊµÊ±Êä³öµçÁ÷
     *
     * Range: 0..4095 (0..409.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ipu_dcd_crealtimeopcurr;

    /**
     * DCDC¹¤×÷Ä£Ê½
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipu_dcd_coperatingmode;

    /**
     * DCDCÊµÊ±Êä³öµçÑ¹
     *
     * Range: 0..4095 (0..409.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ipu_dcd_crealtimeopvolt;

    /**
     * DCDC±¾ÌåÎÂ¶È
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t ipu_dcd_cbodytemp;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipu_livecounter_0x490;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipu_checksum_0x490;
};

/**
 * Signals in message IPU_0X491.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_ipu_0_x491_t {
    /**
     * DCDC¹ýÎÂ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipu_dcdc_over_temp;
};

/**
 * Signals in message IPU_0X500.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_ipu_0_x500_t {
    /**
     * IPUÈí¼þ°æ±¾ºÅ
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ipu_sofeware_num;

    /**
     * IPUÓ²¼þ°æ±¾ºÅ
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ipu_hardware_num;
};

/**
 * Signals in message BMS_0X510.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_bms_0_x510_t {
    /**
     * µç³Ø°üÆ½¾ùÎÂ¶È
     *
     * Range: 0..255 (-40..87.5 ¡æ)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t bms_battery_pack_average_temp;

    /**
     * µ¥ÌåµçÐ¾×ÜÊý
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_packtotalcellnum;

    /**
     * µçÐ¾ÎÂ¶Èµã×ÜÊý
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_packtotaltempnum;

    /**
     * ×î¸ßµçÑ¹µ¥ÌåËùÔÚµç³Ø°üÄ£×éºÅ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_maxvoltcellpacknum;

    /**
     * ×îµÍµçÑ¹µ¥ÌåËùÔÚµç³Ø°üÄ£×éºÅ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_minvoltcellpacknum;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_livecounter_0x510;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_checksum_0x510;
};

/**
 * Signals in message BMS_0X511.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_bms_0_x511_t {
    /**
     * Ö±Á÷²å×ùÎÂ¶È1
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_deg_d_ccharsockettemp1;

    /**
     * Ö±Á÷²å×ùÎÂ¶È2
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_deg_d_ccharsockettemp2;

    /**
     * µ¥ÌåÎÂ¶È×îµÍÖµ±àºÅ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_mintempmonomercell;

    /**
     * µ¥ÌåÎÂ¶È×î´óÖµ±àºÅ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_maxtempmonomercell;

    /**
     * µ¥ÌåµçÐ¾×î¸ßÎÂ¶È
     *
     * Range: 0..255 (-40..87.5 ¡æ)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t bms_maxtempcell;

    /**
     * µ¥ÌåµçÐ¾×îµÍÎÂ¶È
     *
     * Range: 0..255 (-40..87.5 ¡æ)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t bms_mintempcell;

    /**
     * ×î¸ßÎÂ¶Èµ¥ÌåËùÔÚµç³Ø°üÄ£×éºÅ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_maxtempcellpacknum;

    /**
     * ×îµÍÎÂ¶Èµ¥ÌåËùÔÚµç³Ø°üÄ£×éºÅ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_mintempcellpacknum;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_livecounter0x511;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_checksum_0x511;
};

/**
 * Signals in message BMS_0X512.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_bms_0_x512_t {
    /**
     * µ¥ÌåµçÑ¹×îµÍÖµ±àºÅ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_minvoltmonomercell;

    /**
     * µ¥ÌåµçÑ¹×î¸ßÖµ±àºÅ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_maxvoltmonomercell;

    /**
     * µ¥ÌåµçÐ¾µçÑ¹×î´óÖµ
     *
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_maxvoltcell;

    /**
     * µ¥ÌåµçÐ¾µçÑ¹×îµÍÖµ
     *
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_minvoltcell;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_livecounter_0x512;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_checksum_0x512;
};

/**
 * Signals in message BMS_0X520.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_bms_0_x520_t {
    /**
     * µç³Ø¶î¶¨ÈÝÁ¿
     *
     * Range: 0..65535 (0..6553.5 Ah)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_packratecap;

    /**
     * ¶¯Á¦µç³Ø¶î¶¨µçÑ¹
     *
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_pack_rate_volt;

    /**
     * µç³Ø¶î¶¨×ÜÄÜÁ¿
     *
     * Range: 0..65535 (0..6553.5 kwh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_packrateenergy;

    /**
     * ¶¯Á¦µç³ØÀàÐÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_batt_type;

    /**
     * µç³ØÀäÈ´·½Ê½
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_battcooltype;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_livecounter_0x520;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_checksum_0x520;
};

/**
 * Signals in message BMS_0X522.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_bms_0_x522_t {
    /**
     * PackÇ·Ñ¹±¨¾¯
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_packudvolt;

    /**
     * Pack¹ýÑ¹±¨¾¯
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_packovervolt;

    /**
     * µç³ØÎÂ¶È¹ý¸ß±¨¾¯
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_overtemp;

    /**
     * µç³ØÎÂ²îÒì³£±¨¾¯
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_deltatemp;

    /**
     * ¾øÔµ×èÖµ¹ýµÍ±¨¾¯
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_lowinsres;

    /**
     * µ¥ÌåµçÑ¹Ç·Ñ¹±¨¾¯
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_celludvolt;

    /**
     * µ¥ÌåµçÑ¹¹ý¸ß±¨¾¯
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cellovervolt;

    /**
     * SOC¹ýµÍ±¨¾¯
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_packlowsoc;

    /**
     * SOCÌø±ä±¨¾¯
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_packfastchgsoc;

    /**
     * SOC¹ý¸ß±¨¾¯
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_packhighsoc;

    /**
     * ³µÔØ´¢ÄÜ×°ÖÃ¹ý³ä±¨¾¯
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_packovercharge;

    /**
     * µç³ØÒ»ÖÂÐÔ²î±¨¾¯
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ucellincon;

    /**
     * ÈÈÊ§¿Ø±¨¾¯
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_thermalrunawayalarm;

    /**
     * ¸ßÑ¹»¥Ëø±¨¾¯
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_h_vilfault;

    /**
     * ¿É³äµç´¢ÄÜÏµÍ³²»Æ¥Åä±¨¾¯
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_batsysnotmtc;

    /**
     * BMS¹ÊÕÏÂë
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_code;

    /**
     * ¶¯Á¦µç³Ø¹ÊÕÏ×ÜÊý
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_batt_fault_total_num;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_livecounter_0x522;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_checksum_0x522;
};

/**
 * Signals in message GW_VCU_0X350.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_gw_vcu_0_x350_t {
    /**
     * »»µ²Æ÷¹ÊÕÏ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_shif_fault;

    /**
     * »»µ²Æ÷Î»ÖÃ×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_shift_position;

    /**
     * Êµ¼ÊµµÎ»
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_actual_gear;

    /**
     * ÖÆ¶¯Ì¤°å×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_bp_status;

    /**
     * ×¤³µ¹ÊÕÏ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_park_fault;

    /**
     * ×¤³µ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_park_state;

    /**
     * µµÎ»ÇÐ»»Òì³£ÌáÐÑ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_switch_gear_warn;

    /**
     * ÑÓÊ±¼à¿ØÄ£Ê½
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_delay_mon_mode;

    /**
     * ¼ÓËÙÌ¤°å¿ª¶È
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_ap_status;

    /**
     * ÖÆ¶¯µÆµãÁÁÖ¸Áî
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_brk_lamp_ctr_cmd;

    /**
     * ³µÁ¾ËøÖ¹ÌáÊ¾
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_lock_veh_warn;

    /**
     * ÈäÐÐ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_creep_sts;

    /**
     * µ¥Ì¤°åÄ£Ê½×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_single_ped_sts;

    /**
     * ¼ÓËÙÌ¤°å¹ÊÕÏÐÅÏ¢
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_ap_fault;

    /**
     * ÖÆ¶¯Ì¤°å¹ÊÕÏÐÅÏ¢
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_bp_fault;

    /**
     * ÖÆ¶¯Ì¤°å¿ª¶È
     *
     * Range: 0..255 (0..102 -)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t vcu_brk_pdl_pos;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_livecounter_0x350;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_checksum_0x350;
};

/**
 * Signals in message GW_VCU_0X351.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_gw_vcu_0_x351_t {
    /**
     * Charging status combined
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_chrg_sts;

    /**
     * ³ä/·ÅµçÇ¹Á¬½Ó×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_chrg_cnctr_sts;

    /**
     * Flag to show if powertrain is ready to drive.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_pt_rdy;

    /**
     * Charging system output reports actual target SOC used for charging
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_chrg_soc_tar_sp;

    /**
     * Ö±Á÷V2V·Åµç×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_dis_chrg_sts;

    /**
     * ¿ì³ä¼ÌµçÆ÷×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_dc_chrg_rly_sts;

    /**
     * Æ½¾ùµçºÄÓÐÐ§Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_average_energy_consum_vd;

    /**
     * ¿ì³ä¼ÌµçÆ÷¸¨Öú´¥µã×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_dc_chrg_rly_auxil_cntac_sts;

    /**
     * Í£³µÖÆ¶¯ÌáÐÑ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_braking_remind;

    /**
     * Smart DC request
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_smart_dc_req;

    /**
     * Æ½¾ùµçºÄ
     *
     * Range: 0..1023 (0..102.3 kWh/100km)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcu_average_energy_consumption;

    /**
     * Ë²Ê±µçºÄ
     *
     * Range: 0..2047 (-102.3..102.4 kWh/100km)
     * Scale: 0.1
     * Offset: -102.3
     */
    uint16_t vcu_instant_energy_consumption;

    /**
     * Ë²Ê±µçºÄÓÐÐ§Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_instant_energy_consum_vd;

    /**
     * Ô¤Ô¼³äµç×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_chraging_mode_sp;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_livecounter_0x351;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_checksum_0x351;
};

/**
 * Signals in message CCM_0X353.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_ccm_0_x353_t {
    /**
     * Charging system output reports actual target SOC used for charging
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_veh_tar_soc;

    /**
     * ¶¯Á¦µç³ØÎ¬»¤Ö¸Áî
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_batt_maintain_ctr_cmd;

    /**
     * OTAÄ£Ê½Ö¸Áî
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ota_model;

    /**
     * Recharge LV battery ruquest
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_rechrgn_lv_req;

    /**
     * Ö÷¼Ý°²È«´øÎ´ÏµÖ¸Ê¾
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_driver_buckle_status;

    /**
     * ¼ÝÊ»Ä£Ê½ÇëÇó
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_drive_mode_req;

    /**
     * Ëø³µÖ¸ÁîÐí¿É
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_operat_licence;

    /**
     * Ëø³µ³ÌÐò°æ±¾×ª»»±êÊ¶
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_version;

    /**
     * ÏÞËÙµÈ¼¶
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_speed_limit_level;

    /**
     * ³äµçÌõ¼þ±êÊ¶
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_charging_conditions;

    /**
     * ×ÜÀï³Ì
     *
     * Range: 0..4194303 (0..4194303 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t total_odometer;

    /**
     * add body can prop ccm_bcm_open_door_warn_set
     * Range 0..1
     * Scale: 1
     * Offset: 0
    */
    uint8_t ccm_bcm_open_door_warn_set;

    /**
     * Ô¶³Ì³äµçµçÁ÷ÏÞÖÆ
     *
     * Range: 0..255 (0..255 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_target_chrg_curr;

    /**
     * ¶¯Á¦µç³ØÎ¬»¤×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_batt_maintain_sts;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_livecounter_0x353;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_checksum_0x353;
};

/**
 * Signals in message CCM_0X354.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_ccm_0_x354_t {
    /**
     * Ô¶³ÌÉÏµç±êÖ¾Î»
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_remt_ctrl_flag;

    /**
     * ¿ªÊ¼³äµç/½áÊø³äµçÇëÇó
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_charging_request;

    /**
     * ³äµçÄ£Ê½ÇëÇó
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_chraging_mode;

    /**
     * ÄÜÁ¿»ØÊÕµÈ¼¶Éè¶¨
     *
     * Range: 0..255 (0..102 -)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t ccm_energy_recov_level_cmd;

    /**
     * ÈäÐÐ¿ØÖÆÖ¸Áî
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_creep_ctr_cmd;

    /**
     * µ¥Ì¤°åÄ£Ê½¿ØÖÆÖ¸Áî
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_single_ped_ctr_cmd;

    /**
     * ±íÏÔÐøÊ»Àï³Ì
     *
     * Range: 0..800 (0..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ccm_rema_range_disp;

    /**
     * ±íÏÔÐøÊ»Àï³ÌÓÐÐ§Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_rema_range_disp_vd;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_livecounter_0x354;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_checksum_0x354;
};

/**
 * Signals in message GW_VCU_0X352.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_gw_vcu_0_x352_t {
    /**
     * ¼ÝÊ»Ä£Ê½
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_drive_mode;

    /**
     * µç³ØµçÁ¿µÍÌáÊ¾
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_low_soc_warn;

    /**
     * Í¨Ñ¶¹ÊÕÏÎ»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_can_timeout_fault;

    /**
     * Ñ¹Ëõ»ú¾øÔµ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_eas_ins_sta;

    /**
     * VCU¹ÊÕÏµÈ¼¶
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_faultlevel;

    /**
     * DC·ÅµçÏµÍ³¹ÊÕÏÌáÊ¾
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_dc_discharging_fail_warn;

    /**
     * DC³äµç¹ÊÕÏÌáÊ¾
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_dc_charging_fail_warn;

    /**
     * AC³äµç¹ÊÕÏÌáÊ¾
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_ac_charging_fail_warn;

    /**
     * 12V³äµçÏµÍ³¹ÊÕÏÌáÊ¾
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_12_v_charging_fail_warn;

    /**
     * ÖÆ¶¯ÏµÍ³±¨¾¯ÌáÊ¾
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_brak_sys_warn;

    /**
     * Õû³µÏµÍ³ÎÞ·¨ÐÐÊ»¹ÊÕÏÌáÊ¾
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_veh_unable_dri_warn;

    /**
     * ÖÆ¶¯ÒºÎ»¹ýµÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_brk_liquid_level_low;

    /**
     * Õæ¿Õ±ÃÏµÍ³¹ÊÕÏÌáÊ¾
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_vacum_pump_fault;

    /**
     * Ë®±Ã¹ÊÕÏÌáÊ¾
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mot_water_pump_status;

    /**
     * VCU¹ÊÕÏÂë
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_fault_code;

    /**
     * VCU¹ÊÕÏ´¦ÀíµÈ¼¶
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_fault_treat_level;

    /**
     * Drive power limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_drive_pwr_lim;

    /**
     * MCU error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mcu_err;

    /**
     * HV battery error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_hv_batt_err;

    /**
     * Ëø³µÖ¸ÁîÐí¿É
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_operat_licence;

    /**
     * µ±Ç°³ÌÐò°æ±¾
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_version;

    /**
     * ÏÞËÙµÈ¼¶
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_speed_limit_level;

    /**
     * ³äµçÌõ¼þ±êÊ¶
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_charging_conditions;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_livecounter_0x352;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_checksum_0x352;
};

/**
 * Signals in message GW_VCU_0X215.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_gw_vcu_0_x215_t {
    /**
     * Ñ¹Ëõ»ú¸º¼«¼ÌµçÆ÷×´Ì¬
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_comp_neg_rel_sta;

    /**
     * Ñ¹Ëõ»úÕý¼«¼ÌµçÆ÷×´Ì¬
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_comp_pos_rel_sta;

    /**
     * ÈýºÏÒ»ÏµÍ³¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_ipu_err;

    /**
     * VCU¼ìÀäÈ´ÏµÍ³¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_cooling_fail_warn;

    /**
     * VCU¼ìµÍÑ¹µçÆ÷ÏµÍ³¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_lv_elec_sys_err;

    /**
     * VCU¼ì¿Õµ÷¸ßÑ¹ÏµÍ³¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_ac_hv_sys_err;

    /**
     * PTC2¼ÌµçÆ÷×´Ì¬
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_ptc2_rel_sta;

    /**
     * PTC1¼ÌµçÆ÷×´Ì¬
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_ptc1_rel_sta;

    /**
     * HighpwoerµçÑ¹
     *
     * Range: 0..255 (0..25.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t vcu_highpower_voltage;

    /**
     * ·çÉÈ¼ÌµçÆ÷Çý¶¯×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_fan_relay_pin_sts;

    /**
     * Ë®±Ã¼ÌµçÆ÷Çý¶¯×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_water_pump_relay_pin_sts;

    /**
     * Âý³ä»½ÐÑ·´À¡½Å¸øOBC
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_awake_obc_pin_sts;

    /**
     * »½ÐÑÊä³ö2×´Ì¬ £¨ BMS£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_awake_bms_pin_sts;

    /**
     * »½ÐÑÊä³ö1×´Ì¬ £¨MCUºÍDC£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_awake_mcu_pin_sts;

    /**
     * Ö÷¼ÌµçÆ÷Çý¶¯×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_main_relay_pin_sts;

    /**
     * ¿ì³ä»½ÐÑ½Å×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_dc_chrg_awake_pin_sts;

    /**
     * Âý³ä»½ÐÑ½Å×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_ac_chrg_awake_pin_sts;

    /**
     * Ë®±Ãµ÷ËÙPWMÊä³ö½ÅÕ¼¿Õ±È×´Ì¬
     *
     * Range: 0..127 (0..127 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_water_pump_pwm;

    /**
     * KL30µçÔ´µçÑ¹
     *
     * Range: 0..255 (0..25.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t vcu_power_supply_voltag;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_livecounter_0x215;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_checksum_0x215;
};

/**
 * Signals in message GW_ACU_133.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_gw_acu_133_t {
    /**
     * ACUÄÚ²¿´«¸ÐÆ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acu_gsensor_fault;

    /**
     * ACUÏµÍ³¹¤×÷×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acu_system_sts;

    /**
     * ÆøÄÒ¹ÊÕÏÖ¸Ê¾µÆ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acu_airb_warn_lamp_st;

    /**
     * Åö×²ÐÅºÅ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acu_crash_outp_sts;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acu_livecounter_0x133;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acu_checksum_0x133;
};

/**
 * Signals in message GW_EAS_221.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_gw_eas_221_t {
    /**
     * Ñ¹Ëõ»úµç»ú×ªËÙ
     *
     * Range: 0..65535 (0..16383.75 rpm)
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t eas_motspd;

    /**
     * Ñ¹Ëõ»ú»¥Ëø¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eas_eashvil_sta;

    /**
     * EASµ±Ç°×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eas_crtsts;

    /**
     * Ñ¹Ëõ»úIPMÎÂ¶È
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t eas_ip_mtemp;

    /**
     * EAS¹¤×÷×´Ì¬
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eas_ctrlrsts;

    /**
     * Ñ¹Ëõ»úµ±Ç°¹¦ÂÊ
     *
     * Range: 0..255 (0..25.5 Kw)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t eas_crtpwr;

    /**
     * Ñ¹Ëõ»ú¿ØÖÆÆ÷Ä¸ÏßµçÁ÷
     *
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t eas_ctrlrcrt;

    /**
     * Ñ¹Ëõ»ú¿ØÖÆÆ÷Ä¸ÏßµçÑ¹
     *
     * Range: 0..255 (0..1020 V)
     * Scale: 4
     * Offset: 0
     */
    uint8_t eas_ctrlrvolt;
};

/**
 * Signals in message GW_VCU_250.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_gw_vcu_250_t {
    /**
     * Ë®±ÃPWM×´Ì¬
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_pump_state;

    /**
     * »¬¶¯¸ô°åÃÅ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mid_door_ajar_status;

    /**
     * ¶¯Ì¬ÐøÊ»Àï³ÌÓÐÐ§Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_actual_rema_range_vd;

    /**
     * CLTC¹¤¿öÐøÊ»Àï³ÌÓÐÐ§Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_cltc_rema_range_vd;

    /**
     * PTC Ê¹ÄÜ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_pt_cenable;

    /**
     * Ñ¹Ëõ»úÊ¹ÄÜ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_accmenable;

    /**
     * ³µËÙ
     *
     * Range: 0..65535 (0..655.35 km/h)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t vcu_vehicle_spd;

    /**
     * ¶¯Ì¬ÐøÊ»Àï³Ì
     *
     * Range: 0..8191 (0..819.1 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcu_actual_rema_range;

    /**
     * CLTC¹¤¿öÐøÊ»Àï³Ì
     *
     * Range: 0..8191 (0..819.1 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcu_cltc_rema_range;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_livecounter_0x250;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_checksum_0x250;
};

/**
 * Signals in message GW_AC_233.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_gw_ac_233_t {
    /**
     * Õô·¢ÎÂ¶È´«¸ÐÆ÷¹ÊÕÏ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_evaporatortemp_failure;

    /**
     * AC¿ØÖÆÆ÷¹ýÑ¹±£»¤
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_over_voltage_protection;

    /**
     * AC¿ØÖÆÆ÷Ç·Ñ¹±£»¤
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_under_voltage_protection;

    /**
     * ¹Ä·ç»ú¹ÊÕÏ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_blower_failure;

    /**
     * Ä£Ê½·çÃÅÖ´ÐÐÆ÷¹ÊÕÏ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_ai_rdistribution_mode_failure;

    /**
     * ¿Õµ÷¿ØÖÆÆ÷¹ÊÕÏ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_fault_status;

    /**
     * PTCÎÂ¶È¹ý¸ß¹ÊÕÏ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_ptc_over_heat;

    /**
     * PTCÎÂ¶È´«¸ÐÆ÷¹ÊÕÏ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_pt_ctemp_failure;

    /**
     * Ñ¹Ëõ»úÇëÇó×ªËÙ
     *
     * Range: 0..16383 (0..16383 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ac_eas_speed_req;

    /**
     * PTCÇëÇó¹¦ÂÊ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_ptcp_power_req;

    /**
     * ¿Õµ÷Ñ¹Á¦¿ª¹Ø×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_press_swtich_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_livecounter_0x233;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_checksum_0x233;
};

/**
 * Signals in message VCU_610.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_vcu_610_t {
    /**
     * VCUÈí¼þ°æ±¾ºÅ
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcu_sofeware_num;

    /**
     * VCUÓ²¼þ°æ±¾ºÅ
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcu_hardware_num;

    /**
     * Äê
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_year;

    /**
     * ÔÂ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_month;

    /**
     * ÈÕ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_day;
};

/**
 * Signals in message GW_AC_232.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_gw_ac_232_t {
    /**
     * ´µ·çµµÎ»
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_blower_level;

    /**
     * ·çÉÈ¿ªÆôÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_fan_req;

    /**
     * ÄÚÍâÑ­»·½øÆø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_fresh_reci_state;

    /**
     * ³ýËª¹¤×÷×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_front_defrost_state;

    /**
     * PTC¼ÓÈÈ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_heat_state;

    /**
     * ¿Õµ÷¿ìËÙ¿ª±Õ(ON/OFF£©
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_havc_state;

    /**
     * ´µ·çÄ£Ê½
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_ai_rdistribution_mode;

    /**
     * ACÖÆÀä×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_a_cstate;

    /**
     * Éè¶¨ÎÂ¶È
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_left_set_temperature;

    /**
     * ¹Ä·ç»úPWMÖµ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_fan_pwm;

    /**
     * ¹Ä·ç»ú·´À¡µçÑ¹Öµ
     *
     * Range: 0..255 (0..25.5 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t ac_fan_feed_back_voltage;

    /**
     * Õô·¢ÎÂ¶È´«¸ÐÆ÷Êµ¼ÊÖµ
     *
     * Range: 0..255 (-40..87.5 -)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t ac_evaporator_temp;

    /**
     * PTCÎÂ¶È´«¸ÐÆ÷Êµ¼ÊÖµ
     *
     * Range: 0..2047 (-40..983.5 -)
     * Scale: 0.5
     * Offset: -40
     */
    uint16_t ac_pt_ctemp;
};

/**
 * Signals in message GW_BCM_330.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_gw_bcm_330_t {
    /**
     * ×ó/ÓÒÎ»ÖÃµÆ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_position_light_status;

    /**
     * Ô¶¹âµÆ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_high_beam_status;

    /**
     * ½ü¹âµÆ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_low_beam_status;

    /**
     * ÓÒ×ªÏò
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_turn_indcr_ri;

    /**
     * ×ó×ªÏò
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_turn_indcr_le;

    /**
     * Î£ÏÕ±¨¾¯µÆ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_hazard_light_status;

    /**
     * Î»ÖÃµÆÎ´¹Ø±¨¾¯
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_position_light_warning;

    /**
     * ÓÒºóÃÅÅö¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rr_door_ajar_status;

    /**
     * ÓÒÇ°ÃÅÅö¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_fr_door_ajar_status;

    /**
     * ×óÇ°ÃÅÅö¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_fl_door_ajar_status;

    /**
     * ºóÎíµÆ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rear_fog_light_status;

    /**
     * ºó±³ÃÅ¿ª¹ØÐÅºÅ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_tr_cls_st;

    /**
     * Ô¶³ÌÑ°³µ·´À¡
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_remote_car_search_st;

    /**
     * µçÔ´Ä£Ê½ÐÅºÅ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_power_sts;

    /**
     * ¿ª³µÃÅË«ÉÁ¾¯Ê¾·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_ccm_open_door_warn_feed;

    /**
     * ³µÉí¿ØÖÆÏµÍ³DTC¹ÊÕÏ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_dtc_fault_status;

    /**
     * ³µÁ¾·ÀµÁ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_veh_alrm_sys_st;

    /**
     * Ö÷¼ÝÃÅËø×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_drivelock_st;

    /**
     * µ¹³µµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_reversinglight_st;

    /**
     * ÖÆ¶¯µÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_brakelight_st;

    /**
     * ÊÒÄÚµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_interiorlight_st;

    /**
     * ÓÒÍâºóÊÓ¾µ·½Ïòµ÷½Ú·´À¡
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_mirror_set_ack;

    /**
     * ×óÍâºóÊÓ¾µ·½Ïòµ÷½Ú·´À¡
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_mirror_set_ack;

    /**
     * ×Ô¶¯×¤³µ½âËøÊ¹ÄÜ·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_park_un_lock_ack;

    /**
     * ×Ô¶¯ÉÏËøÊ¹ÄÜ·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_auto_lock_ack;

    /**
     * ×Ô¶¯½âËøÊ¹ÄÜ·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_auto_unlock_ack;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_livecounter_0x330;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_checksum_0x330;
};

/**
 * Signals in message CCM_310.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_ccm_310_t {
    /**
     * ¿Õµ÷ACÖÆÀä¿ØÖÆÃüÁî
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_a_ckey;

    /**
     * ¿Õµ÷¿ìËÙ¿ª±Õ(ON/OFF£©
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_ac_havc_state;

    /**
     * ±íÏÔ³µËÙ
     *
     * Range: 0..255 (0..255 km/h)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_vehicle_spd_dsp;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_livecounter_0x310;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_checksum_0x310;
};

/**
 * Signals in message BMS_620.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_bms_620_t {
    /**
     * Èí¼þ°æ±¾
     *
     * Range: 0..16777215 (0..16777215 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t bms_softwareversion;
};

/**
 * Signals in message BMS_570.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_bms_570_t {
    /**
     * µç³ØµçÑ¹ÐòºÅ£¬ÐòºÅ±àºÅË³ÐòÎª1,4,7¡­¡­
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t b2_v_v_frame_no;

    /**
     * µÚ1ºÅµç³ØµçÑ¹£¨×îºóÒ»Ö¡·¢²»Âú£¬Ôò·¢ËÍ0xFFFF£©
     *
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t b2_v_v_cell_volt_n1;

    /**
     * µÚ2ºÅµç³ØµçÑ¹£¨×îºóÒ»Ö¡·¢²»Âú£¬Ôò·¢ËÍ0xFFFF£©
     *
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t b2_v_v_cell_volt_n2;

    /**
     * µÚ3ºÅµç³ØµçÑ¹£¨×îºóÒ»Ö¡·¢²»Âú£¬Ôò·¢ËÍ0xFFFF£©
     *
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t b2_v_v_cell_volt_n3;
};

/**
 * Signals in message BMS_580.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_bms_580_t {
    /**
     * µç³ØÎÂ¶ÈÐòºÅ£¬ÐòºÅ±àºÅË³ÐòÎª1,8,15¡­¡­
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t b2_v_t_frame_no;

    /**
     * µÚ1ºÅµç³ØÎÂ¶È£¨×îºóÒ»Ö¡·¢²»Âú£¬Ôò·¢ËÍ0xFF£©
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t b2_v_t_cell_temp_n1;

    /**
     * µÚ2ºÅµç³ØÎÂ¶È£¨×îºóÒ»Ö¡·¢²»Âú£¬Ôò·¢ËÍ0xFF£©
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t b2_v_t_cell_temp_n2;

    /**
     * µÚ3ºÅµç³ØÎÂ¶È£¨×îºóÒ»Ö¡·¢²»Âú£¬Ôò·¢ËÍ0xFF£©
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t b2_v_t_cell_temp_n3;

    /**
     * µÚ4ºÅµç³ØÎÂ¶È£¨×îºóÒ»Ö¡·¢²»Âú£¬Ôò·¢ËÍ0xFF£©
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t b2_v_t_cell_temp_n4;

    /**
     * µÚ5ºÅµç³ØÎÂ¶È£¨×îºóÒ»Ö¡·¢²»Âú£¬Ôò·¢ËÍ0xFF£©
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t b2_v_t_cell_temp_n5;

    /**
     * µÚ6ºÅµç³ØÎÂ¶È£¨×îºóÒ»Ö¡·¢²»Âú£¬Ôò·¢ËÍ0xFF£©
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t b2_v_t_cell_temp_n6;

    /**
     * µÚ7ºÅµç³ØÎÂ¶È£¨×îºóÒ»Ö¡·¢²»Âú£¬Ôò·¢ËÍ0xFF£©
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t b2_v_t_cell_temp_n7;
};

/**
 * Signals in message BMS_590.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_bms_590_t {
    /**
     * µç³Ø±àÂëÐÅÏ¢Ö¡ÐòºÅ£¬ÐòºÅ±àºÅË³ÐòÎª1,2,3,4¡­¡­
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t b2_v_gbsn_frame_no;

    /**
     * µç³Ø±àÂë³¤¶È
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t b2_v_gbsn_sys_code_length;

    /**
     * µç³Ø±àÂë(SN)×Ö·û1,7,13,19(ASCII)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t b2_v_gbsn_sys_code_1_7_13_19;

    /**
     * µç³Ø±àÂë(SN)×Ö·û2,8,14,20(ASCII)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t b2_v_gbsn_sys_code_2_8_14_20;

    /**
     * µç³Ø±àÂë(SN)×Ö·û3,9,15,21(ASCII)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t b2_v_gbsn_sys_code_3_9_15_21;

    /**
     * µç³Ø±àÂë(SN)×Ö·û4,10,16,22(ASCII)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t b2_v_gbsn_sys_code_4_10_16_22;

    /**
     * µç³Ø±àÂë(SN)×Ö·û5,11,17,23(ASCII)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t b2_v_gbsn_sys_code_5_11_17_23;

    /**
     * µç³Ø±àÂë(SN)×Ö·û6,12,18,24(ASCII)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t b2_v_gbsn_sys_code_6_12_18_24;
};

/**
 * Signals in message VCU_661.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_vcu_661_t {
    /**
     * VCU¹¤×÷ÐèÇó±êÖ¾Î»
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_work_req;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_livecounter_0x661;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_checksum_0x661;
};

/**
 * Signals in message CCM_66C.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_ccm_66_c_t {
    /**
     * T-BOX¹¤×÷ÐèÇó±êÖ¾Î»
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t str_work_req;

    /**
     * CCMË¯Ãß»½ÐÑ¹ÜÀíÎ»
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_nm_bit;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_livecounter_0x66_c;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_checksum_0x66_c;
};

/**
 * Signals in message CCM_630.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_ccm_630_t {
    /**
     * TboxÊÚÊ±±êÖ¾Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_time_status;

    /**
     * Äê
     *
     * Range: 0..255 (2000..2255 year)
     * Scale: 1
     * Offset: 2000
     */
    uint8_t tbox_year;

    /**
     * ÔÂ
     *
     * Range: 0..15 (0..15 month)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_month;

    /**
     * ÈÕ
     *
     * Range: 0..31 (0..31 day)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_day;

    /**
     * Ê±
     *
     * Range: 0..31 (0..31 hour)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_hour;

    /**
     * ·Ö
     *
     * Range: 0..63 (0..63 minute)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_minute;

    /**
     * Ãë
     *
     * Range: 0..63 (0..63 second)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_second;
};

/**
 * Signals in message CCM_558.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_ccm_558_t {
    /**
     * CCM_SOCÈí¼þ°æ±¾ºÅ
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ccm_soc_sofeware_num;

    /**
     * CCM_SOCÓ²¼þ°æ±¾ºÅ
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ccm_soc_hardware_num;

    /**
     * CCM_MCUÈí¼þ°æ±¾ºÅ
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ccm_mcu_sofeware_num;

    /**
     * CCM_MCUÓ²¼þ°æ±¾ºÅ
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ccm_mcu_hardware_num;
};

/**
 * Signals in message BMS_313.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_bms_313_t {
    /**
     * ¶¯Á¦µç³ØÐéÄâSOC
     *
     * Range: 0..1023 (0..102.3 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_batterysoc_virtual;

    /**
     * µ¥´Î³äµçµçÁ¿(³äµç»úÔÚÏßÊ±)
     *
     * Range: 0..65535 (0..6553.5 kwh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_single_chrg_energy;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_livecounter_0x513;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_checksum_0x513;
};

/**
 * Signals in message BMS_314.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_bms_314_t {
    /**
     * Ö±Á÷³äµçÇëÇóµçÁ÷
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_batt_info4_dc_charg_req_curr;

    /**
     * Ö±Á÷³äµçÇëÇóµçÑ¹
     *
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_batt_info4_dc_charg_req_vol;

    /**
     * Ö±Á÷×®Êä³öµçÁ÷
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_batt_info4_mach_put_curr;

    /**
     * Ö±Á÷×®Êä³öµçÑ¹
     *
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_batt_info4_mach_put_volt;
};

/**
 * Signals in message CCM_321.
 *
 * All signal values are as on the CAN bus.
 */
struct ev_can_ccm_4_0_ccm_321_t {
    /**
     * TBox CPUÄÚ²¿ÎÂ¶È¹ýµÍ £¨-40¶È£©£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_cpu_temperature_low;

    /**
     * TBox CPUÄÚ²¿ÎÂ¶È¹ý¸ß (85¶È£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_cpu_temperature_high;

    /**
     * PCBÎÂ¶È¹ýµÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcb_temperature_low;

    /**
     * PCBÎÂ¶È¹ý¸ß
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcb_temperature_high;

    /**
     * Ö÷¹©µçÇ·Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t main_power_supply_voltahe_low;

    /**
     * Ö÷¹©µç¹ýÑ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t main_power_supply_voltahe_high;

    /**
     * ÕÒ²»µ½SIM¿¨
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sim_card_not_present;

    /**
     * WIFI Éè±¸¶ªÊ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wifi_device_lost;

    /**
     * CCM¼ì²âEAS½Úµã¶ªÊ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_detects_eas_node_loss;

    /**
     * CCM¼ì²âBMS½Úµã¶ªÊ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_detects_bms_node_loss;

    /**
     * CCM¼ì²âIPU½Úµã¶ªÊ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_detects_ipu_node_loss;

    /**
     * CCM¼ì²âVCU½Úµã¶ªÊ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_detects_vcu_node_loss;

    /**
     * Ë½ÓÐCAN3×ÜÏß¶ªÊ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t private_can3_bus_off;

    /**
     * Ë½ÓÐCAN2×ÜÏß¶ªÊ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t private_can2_bus_off;

    /**
     * Ë½ÓÐCAN1×ÜÏß¶ªÊ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t private_can1_bus_off;

    /**
     * ±¸ÓÃµç³Ø¶ªÊ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detect_backup_battery_lost;

    /**
     * CCM¼ì²âACU½Úµã¶ªÊ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_detects_acu_node_loss;

    /**
     * CCM¼ì²âBCM½Úµã¶ªÊ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_detects_bcm_node_loss;

    /**
     * CCM¼ì²âAC½Úµã¶ªÊ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccm_detects_ac_node_loss;
};

/**
 * Pack message VCU_0X100.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_vcu_0_x100_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_vcu_0_x100_t *src_p,
    size_t size);

/**
 * Unpack message VCU_0X100.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_vcu_0_x100_unpack(
    struct ev_can_ccm_4_0_vcu_0_x100_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_vcu_0_x100_vcu_d_cdischrg_perm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_0_x100_vcu_d_cdischrg_perm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_0_x100_vcu_d_cdischrg_perm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_vcu_0_x100_vcu_pt_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_0_x100_vcu_pt_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_0_x100_vcu_pt_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_vcu_0_x100_vcu_hvpower_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_0_x100_vcu_hvpower_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_0_x100_vcu_hvpower_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_vcu_0_x100_vcu_dcd_cworkenable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_0_x100_vcu_dcd_cworkenable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_0_x100_vcu_dcd_cworkenable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_vcu_0_x100_vcu_charallow_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_0_x100_vcu_charallow_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_0_x100_vcu_charallow_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_vcu_0_x100_vcu_igon_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_0_x100_vcu_igon_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_0_x100_vcu_igon_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_vcu_0_x100_vcu_sleepindicationsignal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_0_x100_vcu_sleepindicationsignal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_0_x100_vcu_sleepindicationsignal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_vcu_0_x100_vcu_livecounter_0x100_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_0_x100_vcu_livecounter_0x100_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_0_x100_vcu_livecounter_0x100_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_vcu_0_x100_vcu_checksum_0x100_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_0_x100_vcu_checksum_0x100_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_0_x100_vcu_checksum_0x100_is_in_range(uint8_t value);

/**
 * Pack message VCU_MCU_111.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_vcu_mcu_111_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_vcu_mcu_111_t *src_p,
    size_t size);

/**
 * Unpack message VCU_MCU_111.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_vcu_mcu_111_unpack(
    struct ev_can_ccm_4_0_vcu_mcu_111_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_vcu_mcu_111_vcu_tqreq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_mcu_111_vcu_tqreq_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_mcu_111_vcu_tqreq_is_in_range(uint16_t value);

/**
 * Pack message BMS_0X120.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x120_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_bms_0_x120_t *src_p,
    size_t size);

/**
 * Unpack message BMS_0X120.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x120_unpack(
    struct ev_can_ccm_4_0_bms_0_x120_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x120_bms_mainrelaynega_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x120_bms_mainrelaynega_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x120_bms_mainrelaynega_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x120_bms_heatrelaystatus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x120_bms_heatrelaystatus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x120_bms_heatrelaystatus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x120_bms_initstatus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x120_bms_initstatus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x120_bms_initstatus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x120_bms_hv_batt_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x120_bms_hv_batt_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x120_bms_hv_batt_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x120_bms_cc2status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x120_bms_cc2status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x120_bms_cc2status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x120_bms_livecounter_0x120_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x120_bms_livecounter_0x120_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x120_bms_livecounter_0x120_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x120_bms_checksum_0x120_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x120_bms_checksum_0x120_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x120_bms_checksum_0x120_is_in_range(uint8_t value);

/**
 * Pack message BMS_0X125.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x125_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_bms_0_x125_t *src_p,
    size_t size);

/**
 * Unpack message BMS_0X125.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x125_unpack(
    struct ev_can_ccm_4_0_bms_0_x125_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_0_x125_bms_batinsulatresistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x125_bms_batinsulatresistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x125_bms_batinsulatresistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_0_x125_bms_batterycurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x125_bms_batterycurrent_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x125_bms_batterycurrent_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_0_x125_bms_packvoltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x125_bms_packvoltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x125_bms_packvoltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x125_bms_livecounter_0x125_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x125_bms_livecounter_0x125_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x125_bms_livecounter_0x125_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x125_bms_checksum_0x125_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x125_bms_checksum_0x125_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x125_bms_checksum_0x125_is_in_range(uint8_t value);

/**
 * Pack message BMS_0X130.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x130_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_bms_0_x130_t *src_p,
    size_t size);

/**
 * Unpack message BMS_0X130.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x130_unpack(
    struct ev_can_ccm_4_0_bms_0_x130_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_0_x130_bms_realtimealowdischapower_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x130_bms_realtimealowdischapower_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x130_bms_realtimealowdischapower_is_in_range(uint16_t value);

/**
 * Pack message BMS_0X135.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x135_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_bms_0_x135_t *src_p,
    size_t size);

/**
 * Unpack message BMS_0X135.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x135_unpack(
    struct ev_can_ccm_4_0_bms_0_x135_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_0_x135_bms_soe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x135_bms_soe_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x135_bms_soe_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_0_x135_bms_remainingchargetime_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x135_bms_remainingchargetime_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x135_bms_remainingchargetime_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_0_x135_bms_batterysoc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x135_bms_batterysoc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x135_bms_batterysoc_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_0_x135_bms_batterysoh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x135_bms_batterysoh_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x135_bms_batterysoh_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x135_bms_livecounter_0x135_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x135_bms_livecounter_0x135_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x135_bms_livecounter_0x135_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x135_bms_checksum_0x135_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x135_bms_checksum_0x135_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x135_bms_checksum_0x135_is_in_range(uint8_t value);

/**
 * Pack message IPU_0X160.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_ipu_0_x160_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_ipu_0_x160_t *src_p,
    size_t size);

/**
 * Unpack message IPU_0X160.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_ipu_0_x160_unpack(
    struct ev_can_ccm_4_0_ipu_0_x160_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ipu_0_x160_ipu_mainrelayposistatus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x160_ipu_mainrelayposistatus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x160_ipu_mainrelayposistatus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ipu_0_x160_ipu_workstatus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x160_ipu_workstatus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x160_ipu_workstatus_is_in_range(uint8_t value);

/**
 * Pack message GW_ABS_171.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_gw_abs_171_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_gw_abs_171_t *src_p,
    size_t size);

/**
 * Unpack message GW_ABS_171.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_gw_abs_171_unpack(
    struct ev_can_ccm_4_0_gw_abs_171_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_abs_171_abs_abs_active_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_abs_171_abs_abs_active_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_abs_171_abs_abs_active_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_abs_171_abs_noe_vflag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_abs_171_abs_noe_vflag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_abs_171_abs_noe_vflag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_abs_171_abs_abs_fail_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_abs_171_abs_abs_fail_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_abs_171_abs_abs_fail_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_abs_171_abs_ebd_fail_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_abs_171_abs_ebd_fail_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_abs_171_abs_ebd_fail_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_abs_171_abs_vehic_speedvalid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_abs_171_abs_vehic_speedvalid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_abs_171_abs_vehic_speedvalid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_gw_abs_171_abs_vehicl_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_abs_171_abs_vehicl_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_abs_171_abs_vehicl_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_abs_171_abs_llivecounter_0x171_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_abs_171_abs_llivecounter_0x171_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_abs_171_abs_llivecounter_0x171_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_abs_171_abs_checksum_0x171_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_abs_171_abs_checksum_0x171_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_abs_171_abs_checksum_0x171_is_in_range(uint8_t value);

/**
 * Pack message MCU_STATUS_1_200.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_mcu_status_1_200_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_mcu_status_1_200_t *src_p,
    size_t size);

/**
 * Unpack message MCU_STATUS_1_200.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_mcu_status_1_200_unpack(
    struct ev_can_ccm_4_0_mcu_status_1_200_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_mcu_status_1_200_mcu_motortorque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_1_200_mcu_motortorque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_1_200_mcu_motortorque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_mcu_status_1_200_mcu_motorspd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_1_200_mcu_motorspd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_1_200_mcu_motorspd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_mcu_status_1_200_mcu_llivecounter_0x200_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_1_200_mcu_llivecounter_0x200_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_1_200_mcu_llivecounter_0x200_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_mcu_status_1_200_mcu_checksum_0x200_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_1_200_mcu_checksum_0x200_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_1_200_mcu_checksum_0x200_is_in_range(uint8_t value);

/**
 * Pack message MCU_STATUS_2_201.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_mcu_status_2_201_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_mcu_status_2_201_t *src_p,
    size_t size);

/**
 * Unpack message MCU_STATUS_2_201.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_mcu_status_2_201_unpack(
    struct ev_can_ccm_4_0_mcu_status_2_201_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_mcu_status_2_201_mcu_buscurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_2_201_mcu_buscurrent_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_2_201_mcu_buscurrent_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_mcu_status_2_201_mcu_busvolt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_2_201_mcu_busvolt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_2_201_mcu_busvolt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_mcu_status_2_201_mcu_llivecounter_0x201_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_2_201_mcu_llivecounter_0x201_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_2_201_mcu_llivecounter_0x201_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_mcu_status_2_201_mcu_checksum_0x201_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_2_201_mcu_checksum_0x201_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_2_201_mcu_checksum_0x201_is_in_range(uint8_t value);

/**
 * Pack message MCU_STATUS_3_202.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_mcu_status_3_202_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_mcu_status_3_202_t *src_p,
    size_t size);

/**
 * Unpack message MCU_STATUS_3_202.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_mcu_status_3_202_unpack(
    struct ev_can_ccm_4_0_mcu_status_3_202_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_mcu_status_3_202_mcu_err_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_3_202_mcu_err_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_3_202_mcu_err_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_mcu_status_3_202_mcu_motortemp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_3_202_mcu_motortemp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_3_202_mcu_motortemp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_mcu_status_3_202_mcu_igbttemp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_3_202_mcu_igbttemp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_3_202_mcu_igbttemp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_mcu_status_3_202_mcu_motoropermode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_3_202_mcu_motoropermode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_3_202_mcu_motoropermode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_mcu_status_3_202_mcu_llivecounter_0x202_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_3_202_mcu_llivecounter_0x202_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_3_202_mcu_llivecounter_0x202_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_mcu_status_3_202_mcu_checksum_0x202_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_3_202_mcu_checksum_0x202_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_3_202_mcu_checksum_0x202_is_in_range(uint8_t value);

/**
 * Pack message MCU_STATUS_4_203.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_mcu_status_4_203_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_mcu_status_4_203_t *src_p,
    size_t size);

/**
 * Unpack message MCU_STATUS_4_203.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_mcu_status_4_203_unpack(
    struct ev_can_ccm_4_0_mcu_status_4_203_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_mcu_status_4_203_mcu_motor_fault_total_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_4_203_mcu_motor_fault_total_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_4_203_mcu_motor_fault_total_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_mcu_status_4_203_mcu_motor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_4_203_mcu_motor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_4_203_mcu_motor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_mcu_status_4_203_mcu_igbt_overheat_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_4_203_mcu_igbt_overheat_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_4_203_mcu_igbt_overheat_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_mcu_status_4_203_mcu_motor_overheat_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_4_203_mcu_motor_overheat_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_4_203_mcu_motor_overheat_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_mcu_status_4_203_mcu_llivecounter_0x203_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_4_203_mcu_llivecounter_0x203_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_4_203_mcu_llivecounter_0x203_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_mcu_status_4_203_mcu_checksum_0x203_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_mcu_status_4_203_mcu_checksum_0x203_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_mcu_status_4_203_mcu_checksum_0x203_is_in_range(uint8_t value);

/**
 * Pack message IPU_0X450.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_ipu_0_x450_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_ipu_0_x450_t *src_p,
    size_t size);

/**
 * Unpack message IPU_0X450.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_ipu_0_x450_unpack(
    struct ev_can_ccm_4_0_ipu_0_x450_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ipu_0_x450_ipu_smart_dc_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x450_ipu_smart_dc_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x450_ipu_smart_dc_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ipu_0_x450_ipu_livecounter_0x450_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x450_ipu_livecounter_0x450_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x450_ipu_livecounter_0x450_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ipu_0_x450_ipu_checksum_0x450_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x450_ipu_checksum_0x450_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x450_ipu_checksum_0x450_is_in_range(uint8_t value);

/**
 * Pack message IPU_0X470.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_ipu_0_x470_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_ipu_0_x470_t *src_p,
    size_t size);

/**
 * Unpack message IPU_0X470.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_ipu_0_x470_unpack(
    struct ev_can_ccm_4_0_ipu_0_x470_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ipu_0_x470_ipu_ipuhvil_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x470_ipu_ipuhvil_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x470_ipu_ipuhvil_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_ipu_0_x470_ipu_obc_output_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x470_ipu_obc_output_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x470_ipu_obc_output_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_ipu_0_x470_ipu_obc_output_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x470_ipu_obc_output_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x470_ipu_obc_output_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ipu_0_x470_ipu_c_cresistancevalue_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x470_ipu_c_cresistancevalue_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x470_ipu_c_cresistancevalue_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ipu_0_x470_ipu_livecounter_0x470_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x470_ipu_livecounter_0x470_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x470_ipu_livecounter_0x470_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ipu_0_x470_ipu_checksum_0x470_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x470_ipu_checksum_0x470_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x470_ipu_checksum_0x470_is_in_range(uint8_t value);

/**
 * Pack message IPU_0X471.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_ipu_0_x471_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_ipu_0_x471_t *src_p,
    size_t size);

/**
 * Unpack message IPU_0X471.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_ipu_0_x471_unpack(
    struct ev_can_ccm_4_0_ipu_0_x471_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ipu_0_x471_ipu_c_pdutycycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x471_ipu_c_pdutycycle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x471_ipu_c_pdutycycle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_ipu_0_x471_ipu_ob_cinputvoltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x471_ipu_ob_cinputvoltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x471_ipu_ob_cinputvoltage_is_in_range(uint16_t value);

/**
 * Pack message IPU_0X472.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_ipu_0_x472_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_ipu_0_x472_t *src_p,
    size_t size);

/**
 * Unpack message IPU_0X472.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_ipu_0_x472_unpack(
    struct ev_can_ccm_4_0_ipu_0_x472_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_ipu_0_x472_ipu_ob_cinputcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x472_ipu_ob_cinputcurrent_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x472_ipu_ob_cinputcurrent_is_in_range(uint16_t value);

/**
 * Pack message IPU_0X490.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_ipu_0_x490_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_ipu_0_x490_t *src_p,
    size_t size);

/**
 * Unpack message IPU_0X490.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_ipu_0_x490_unpack(
    struct ev_can_ccm_4_0_ipu_0_x490_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_ipu_0_x490_ipu_dcd_crealtimeopcurr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x490_ipu_dcd_crealtimeopcurr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x490_ipu_dcd_crealtimeopcurr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ipu_0_x490_ipu_dcd_coperatingmode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x490_ipu_dcd_coperatingmode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x490_ipu_dcd_coperatingmode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_ipu_0_x490_ipu_dcd_crealtimeopvolt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x490_ipu_dcd_crealtimeopvolt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x490_ipu_dcd_crealtimeopvolt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ipu_0_x490_ipu_dcd_cbodytemp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x490_ipu_dcd_cbodytemp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x490_ipu_dcd_cbodytemp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ipu_0_x490_ipu_livecounter_0x490_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x490_ipu_livecounter_0x490_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x490_ipu_livecounter_0x490_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ipu_0_x490_ipu_checksum_0x490_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x490_ipu_checksum_0x490_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x490_ipu_checksum_0x490_is_in_range(uint8_t value);

/**
 * Pack message IPU_0X491.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_ipu_0_x491_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_ipu_0_x491_t *src_p,
    size_t size);

/**
 * Unpack message IPU_0X491.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_ipu_0_x491_unpack(
    struct ev_can_ccm_4_0_ipu_0_x491_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ipu_0_x491_ipu_dcdc_over_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x491_ipu_dcdc_over_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x491_ipu_dcdc_over_temp_is_in_range(uint8_t value);

/**
 * Pack message IPU_0X500.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_ipu_0_x500_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_ipu_0_x500_t *src_p,
    size_t size);

/**
 * Unpack message IPU_0X500.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_ipu_0_x500_unpack(
    struct ev_can_ccm_4_0_ipu_0_x500_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_ipu_0_x500_ipu_sofeware_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x500_ipu_sofeware_num_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x500_ipu_sofeware_num_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_ipu_0_x500_ipu_hardware_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ipu_0_x500_ipu_hardware_num_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ipu_0_x500_ipu_hardware_num_is_in_range(uint16_t value);

/**
 * Pack message BMS_0X510.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x510_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_bms_0_x510_t *src_p,
    size_t size);

/**
 * Unpack message BMS_0X510.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x510_unpack(
    struct ev_can_ccm_4_0_bms_0_x510_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x510_bms_battery_pack_average_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x510_bms_battery_pack_average_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x510_bms_battery_pack_average_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x510_bms_packtotalcellnum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x510_bms_packtotalcellnum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x510_bms_packtotalcellnum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x510_bms_packtotaltempnum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x510_bms_packtotaltempnum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x510_bms_packtotaltempnum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x510_bms_maxvoltcellpacknum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x510_bms_maxvoltcellpacknum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x510_bms_maxvoltcellpacknum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x510_bms_minvoltcellpacknum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x510_bms_minvoltcellpacknum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x510_bms_minvoltcellpacknum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x510_bms_livecounter_0x510_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x510_bms_livecounter_0x510_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x510_bms_livecounter_0x510_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x510_bms_checksum_0x510_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x510_bms_checksum_0x510_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x510_bms_checksum_0x510_is_in_range(uint8_t value);

/**
 * Pack message BMS_0X511.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x511_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_bms_0_x511_t *src_p,
    size_t size);

/**
 * Unpack message BMS_0X511.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x511_unpack(
    struct ev_can_ccm_4_0_bms_0_x511_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x511_bms_deg_d_ccharsockettemp1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x511_bms_deg_d_ccharsockettemp1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x511_bms_deg_d_ccharsockettemp1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x511_bms_deg_d_ccharsockettemp2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x511_bms_deg_d_ccharsockettemp2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x511_bms_deg_d_ccharsockettemp2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x511_bms_mintempmonomercell_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x511_bms_mintempmonomercell_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x511_bms_mintempmonomercell_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x511_bms_maxtempmonomercell_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x511_bms_maxtempmonomercell_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x511_bms_maxtempmonomercell_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x511_bms_maxtempcell_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x511_bms_maxtempcell_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x511_bms_maxtempcell_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x511_bms_mintempcell_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x511_bms_mintempcell_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x511_bms_mintempcell_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x511_bms_maxtempcellpacknum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x511_bms_maxtempcellpacknum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x511_bms_maxtempcellpacknum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x511_bms_mintempcellpacknum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x511_bms_mintempcellpacknum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x511_bms_mintempcellpacknum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x511_bms_livecounter0x511_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x511_bms_livecounter0x511_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x511_bms_livecounter0x511_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x511_bms_checksum_0x511_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x511_bms_checksum_0x511_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x511_bms_checksum_0x511_is_in_range(uint8_t value);

/**
 * Pack message BMS_0X512.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x512_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_bms_0_x512_t *src_p,
    size_t size);

/**
 * Unpack message BMS_0X512.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x512_unpack(
    struct ev_can_ccm_4_0_bms_0_x512_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x512_bms_minvoltmonomercell_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x512_bms_minvoltmonomercell_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x512_bms_minvoltmonomercell_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x512_bms_maxvoltmonomercell_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x512_bms_maxvoltmonomercell_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x512_bms_maxvoltmonomercell_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_0_x512_bms_maxvoltcell_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x512_bms_maxvoltcell_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x512_bms_maxvoltcell_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_0_x512_bms_minvoltcell_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x512_bms_minvoltcell_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x512_bms_minvoltcell_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x512_bms_livecounter_0x512_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x512_bms_livecounter_0x512_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x512_bms_livecounter_0x512_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x512_bms_checksum_0x512_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x512_bms_checksum_0x512_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x512_bms_checksum_0x512_is_in_range(uint8_t value);

/**
 * Pack message BMS_0X520.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x520_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_bms_0_x520_t *src_p,
    size_t size);

/**
 * Unpack message BMS_0X520.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x520_unpack(
    struct ev_can_ccm_4_0_bms_0_x520_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_0_x520_bms_packratecap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x520_bms_packratecap_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x520_bms_packratecap_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_0_x520_bms_pack_rate_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x520_bms_pack_rate_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x520_bms_pack_rate_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_0_x520_bms_packrateenergy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x520_bms_packrateenergy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x520_bms_packrateenergy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x520_bms_batt_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x520_bms_batt_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x520_bms_batt_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x520_bms_battcooltype_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x520_bms_battcooltype_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x520_bms_battcooltype_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x520_bms_livecounter_0x520_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x520_bms_livecounter_0x520_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x520_bms_livecounter_0x520_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x520_bms_checksum_0x520_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x520_bms_checksum_0x520_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x520_bms_checksum_0x520_is_in_range(uint8_t value);

/**
 * Pack message BMS_0X522.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x522_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_bms_0_x522_t *src_p,
    size_t size);

/**
 * Unpack message BMS_0X522.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_bms_0_x522_unpack(
    struct ev_can_ccm_4_0_bms_0_x522_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_packudvolt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_packudvolt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_packudvolt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_packovervolt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_packovervolt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_packovervolt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_overtemp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_overtemp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_overtemp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_deltatemp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_deltatemp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_deltatemp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_lowinsres_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_lowinsres_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_lowinsres_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_celludvolt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_celludvolt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_celludvolt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_cellovervolt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_cellovervolt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_cellovervolt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_packlowsoc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_packlowsoc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_packlowsoc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_packfastchgsoc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_packfastchgsoc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_packfastchgsoc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_packhighsoc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_packhighsoc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_packhighsoc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_packovercharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_packovercharge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_packovercharge_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_ucellincon_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_ucellincon_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_ucellincon_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_thermalrunawayalarm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_thermalrunawayalarm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_thermalrunawayalarm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_h_vilfault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_h_vilfault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_h_vilfault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_batsysnotmtc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_batsysnotmtc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_batsysnotmtc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_fault_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_fault_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_fault_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_batt_fault_total_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_batt_fault_total_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_batt_fault_total_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_livecounter_0x522_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_livecounter_0x522_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_livecounter_0x522_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_0_x522_bms_checksum_0x522_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_0_x522_bms_checksum_0x522_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_0_x522_bms_checksum_0x522_is_in_range(uint8_t value);

/**
 * Pack message GW_VCU_0X350.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_gw_vcu_0_x350_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_gw_vcu_0_x350_t *src_p,
    size_t size);

/**
 * Unpack message GW_VCU_0X350.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_gw_vcu_0_x350_unpack(
    struct ev_can_ccm_4_0_gw_vcu_0_x350_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_shif_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_shif_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_shif_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_shift_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_shift_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_shift_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_actual_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_actual_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_actual_gear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_bp_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_bp_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_bp_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_park_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_park_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_park_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_park_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_park_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_park_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_switch_gear_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_switch_gear_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_switch_gear_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_delay_mon_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_delay_mon_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_delay_mon_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_ap_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_ap_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_ap_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_brk_lamp_ctr_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_brk_lamp_ctr_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_brk_lamp_ctr_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_lock_veh_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_lock_veh_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_lock_veh_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_creep_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_creep_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_creep_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_single_ped_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_single_ped_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_single_ped_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_ap_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_ap_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_ap_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_bp_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_bp_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_bp_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_brk_pdl_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_brk_pdl_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_brk_pdl_pos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_livecounter_0x350_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_livecounter_0x350_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_livecounter_0x350_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x350_vcu_checksum_0x350_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x350_vcu_checksum_0x350_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x350_vcu_checksum_0x350_is_in_range(uint8_t value);

/**
 * Pack message GW_VCU_0X351.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_gw_vcu_0_x351_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_gw_vcu_0_x351_t *src_p,
    size_t size);

/**
 * Unpack message GW_VCU_0X351.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_gw_vcu_0_x351_unpack(
    struct ev_can_ccm_4_0_gw_vcu_0_x351_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x351_vcu_chrg_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x351_vcu_chrg_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x351_vcu_chrg_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x351_vcu_chrg_cnctr_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x351_vcu_chrg_cnctr_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x351_vcu_chrg_cnctr_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x351_vcu_pt_rdy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x351_vcu_pt_rdy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x351_vcu_pt_rdy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x351_vcu_chrg_soc_tar_sp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x351_vcu_chrg_soc_tar_sp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x351_vcu_chrg_soc_tar_sp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x351_vcu_dis_chrg_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x351_vcu_dis_chrg_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x351_vcu_dis_chrg_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x351_vcu_dc_chrg_rly_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x351_vcu_dc_chrg_rly_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x351_vcu_dc_chrg_rly_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x351_vcu_average_energy_consum_vd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x351_vcu_average_energy_consum_vd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x351_vcu_average_energy_consum_vd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x351_vcu_dc_chrg_rly_auxil_cntac_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x351_vcu_dc_chrg_rly_auxil_cntac_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x351_vcu_dc_chrg_rly_auxil_cntac_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x351_vcu_braking_remind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x351_vcu_braking_remind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x351_vcu_braking_remind_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x351_vcu_smart_dc_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x351_vcu_smart_dc_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x351_vcu_smart_dc_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_gw_vcu_0_x351_vcu_average_energy_consumption_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x351_vcu_average_energy_consumption_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x351_vcu_average_energy_consumption_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_gw_vcu_0_x351_vcu_instant_energy_consumption_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x351_vcu_instant_energy_consumption_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x351_vcu_instant_energy_consumption_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x351_vcu_instant_energy_consum_vd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x351_vcu_instant_energy_consum_vd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x351_vcu_instant_energy_consum_vd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x351_vcu_chraging_mode_sp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x351_vcu_chraging_mode_sp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x351_vcu_chraging_mode_sp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x351_vcu_livecounter_0x351_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x351_vcu_livecounter_0x351_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x351_vcu_livecounter_0x351_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x351_vcu_checksum_0x351_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x351_vcu_checksum_0x351_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x351_vcu_checksum_0x351_is_in_range(uint8_t value);

/**
 * Pack message CCM_0X353.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_ccm_0_x353_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_ccm_0_x353_t *src_p,
    size_t size);

/**
 * Unpack message CCM_0X353.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_ccm_0_x353_unpack(
    struct ev_can_ccm_4_0_ccm_0_x353_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x353_ccm_veh_tar_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x353_ccm_veh_tar_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x353_ccm_veh_tar_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x353_ccm_batt_maintain_ctr_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x353_ccm_batt_maintain_ctr_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x353_ccm_batt_maintain_ctr_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x353_ota_model_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x353_ota_model_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x353_ota_model_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x353_ccm_rechrgn_lv_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x353_ccm_rechrgn_lv_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x353_ccm_rechrgn_lv_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x353_ccm_driver_buckle_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x353_ccm_driver_buckle_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x353_ccm_driver_buckle_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x353_ccm_drive_mode_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x353_ccm_drive_mode_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x353_ccm_drive_mode_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x353_ccm_operat_licence_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x353_ccm_operat_licence_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x353_ccm_operat_licence_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x353_ccm_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x353_ccm_version_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x353_ccm_version_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x353_ccm_speed_limit_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x353_ccm_speed_limit_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x353_ccm_speed_limit_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x353_ccm_charging_conditions_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x353_ccm_charging_conditions_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x353_ccm_charging_conditions_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ev_can_ccm_4_0_ccm_0_x353_total_odometer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x353_total_odometer_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x353_total_odometer_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x353_ccm_target_chrg_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x353_ccm_target_chrg_curr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x353_ccm_target_chrg_curr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x353_ccm_batt_maintain_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x353_ccm_batt_maintain_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x353_ccm_batt_maintain_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x353_ccm_livecounter_0x353_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x353_ccm_livecounter_0x353_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x353_ccm_livecounter_0x353_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x353_ccm_checksum_0x353_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x353_ccm_checksum_0x353_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x353_ccm_checksum_0x353_is_in_range(uint8_t value);

/**
 * Pack message CCM_0X354.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_ccm_0_x354_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_ccm_0_x354_t *src_p,
    size_t size);

/**
 * Unpack message CCM_0X354.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_ccm_0_x354_unpack(
    struct ev_can_ccm_4_0_ccm_0_x354_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x354_ccm_remt_ctrl_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x354_ccm_remt_ctrl_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x354_ccm_remt_ctrl_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x354_ccm_charging_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x354_ccm_charging_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x354_ccm_charging_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x354_ccm_chraging_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x354_ccm_chraging_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x354_ccm_chraging_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x354_ccm_energy_recov_level_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x354_ccm_energy_recov_level_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x354_ccm_energy_recov_level_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x354_ccm_creep_ctr_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x354_ccm_creep_ctr_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x354_ccm_creep_ctr_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x354_ccm_single_ped_ctr_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x354_ccm_single_ped_ctr_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x354_ccm_single_ped_ctr_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_ccm_0_x354_ccm_rema_range_disp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x354_ccm_rema_range_disp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x354_ccm_rema_range_disp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x354_ccm_rema_range_disp_vd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x354_ccm_rema_range_disp_vd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x354_ccm_rema_range_disp_vd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x354_ccm_livecounter_0x354_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x354_ccm_livecounter_0x354_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x354_ccm_livecounter_0x354_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_0_x354_ccm_checksum_0x354_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_0_x354_ccm_checksum_0x354_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_0_x354_ccm_checksum_0x354_is_in_range(uint8_t value);

/**
 * Pack message GW_VCU_0X352.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_gw_vcu_0_x352_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_gw_vcu_0_x352_t *src_p,
    size_t size);

/**
 * Unpack message GW_VCU_0X352.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_gw_vcu_0_x352_unpack(
    struct ev_can_ccm_4_0_gw_vcu_0_x352_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_drive_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_drive_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_drive_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_low_soc_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_low_soc_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_low_soc_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_can_timeout_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_can_timeout_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_can_timeout_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_eas_ins_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_eas_ins_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_eas_ins_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_faultlevel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_faultlevel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_faultlevel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_dc_discharging_fail_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_dc_discharging_fail_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_dc_discharging_fail_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_dc_charging_fail_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_dc_charging_fail_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_dc_charging_fail_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_ac_charging_fail_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_ac_charging_fail_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_ac_charging_fail_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_12_v_charging_fail_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_12_v_charging_fail_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_12_v_charging_fail_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_brak_sys_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_brak_sys_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_brak_sys_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_veh_unable_dri_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_veh_unable_dri_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_veh_unable_dri_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_brk_liquid_level_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_brk_liquid_level_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_brk_liquid_level_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_vacum_pump_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_vacum_pump_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_vacum_pump_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_mot_water_pump_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_mot_water_pump_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_mot_water_pump_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_fault_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_fault_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_fault_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_fault_treat_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_fault_treat_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_fault_treat_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_drive_pwr_lim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_drive_pwr_lim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_drive_pwr_lim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_mcu_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_mcu_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_mcu_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_hv_batt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_hv_batt_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_hv_batt_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_operat_licence_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_operat_licence_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_operat_licence_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_version_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_version_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_speed_limit_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_speed_limit_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_speed_limit_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_charging_conditions_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_charging_conditions_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_charging_conditions_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_livecounter_0x352_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_livecounter_0x352_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_livecounter_0x352_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x352_vcu_checksum_0x352_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x352_vcu_checksum_0x352_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x352_vcu_checksum_0x352_is_in_range(uint8_t value);

/**
 * Pack message GW_VCU_0X215.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_gw_vcu_0_x215_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_gw_vcu_0_x215_t *src_p,
    size_t size);

/**
 * Unpack message GW_VCU_0X215.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_gw_vcu_0_x215_unpack(
    struct ev_can_ccm_4_0_gw_vcu_0_x215_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_comp_neg_rel_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_comp_neg_rel_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_comp_neg_rel_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_comp_pos_rel_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_comp_pos_rel_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_comp_pos_rel_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_ipu_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_ipu_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_ipu_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_cooling_fail_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_cooling_fail_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_cooling_fail_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_lv_elec_sys_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_lv_elec_sys_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_lv_elec_sys_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_ac_hv_sys_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_ac_hv_sys_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_ac_hv_sys_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_ptc2_rel_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_ptc2_rel_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_ptc2_rel_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_ptc1_rel_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_ptc1_rel_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_ptc1_rel_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_highpower_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_highpower_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_highpower_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_fan_relay_pin_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_fan_relay_pin_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_fan_relay_pin_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_water_pump_relay_pin_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_water_pump_relay_pin_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_water_pump_relay_pin_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_awake_obc_pin_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_awake_obc_pin_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_awake_obc_pin_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_awake_bms_pin_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_awake_bms_pin_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_awake_bms_pin_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_awake_mcu_pin_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_awake_mcu_pin_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_awake_mcu_pin_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_main_relay_pin_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_main_relay_pin_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_main_relay_pin_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_dc_chrg_awake_pin_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_dc_chrg_awake_pin_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_dc_chrg_awake_pin_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_ac_chrg_awake_pin_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_ac_chrg_awake_pin_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_ac_chrg_awake_pin_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_water_pump_pwm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_water_pump_pwm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_water_pump_pwm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_power_supply_voltag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_power_supply_voltag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_power_supply_voltag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_livecounter_0x215_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_livecounter_0x215_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_livecounter_0x215_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_0_x215_vcu_checksum_0x215_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_0_x215_vcu_checksum_0x215_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_0_x215_vcu_checksum_0x215_is_in_range(uint8_t value);

/**
 * Pack message GW_ACU_133.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_gw_acu_133_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_gw_acu_133_t *src_p,
    size_t size);

/**
 * Unpack message GW_ACU_133.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_gw_acu_133_unpack(
    struct ev_can_ccm_4_0_gw_acu_133_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_acu_133_acu_gsensor_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_acu_133_acu_gsensor_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_acu_133_acu_gsensor_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_acu_133_acu_system_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_acu_133_acu_system_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_acu_133_acu_system_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_acu_133_acu_airb_warn_lamp_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_acu_133_acu_airb_warn_lamp_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_acu_133_acu_airb_warn_lamp_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_acu_133_acu_crash_outp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_acu_133_acu_crash_outp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_acu_133_acu_crash_outp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_acu_133_acu_livecounter_0x133_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_acu_133_acu_livecounter_0x133_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_acu_133_acu_livecounter_0x133_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_acu_133_acu_checksum_0x133_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_acu_133_acu_checksum_0x133_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_acu_133_acu_checksum_0x133_is_in_range(uint8_t value);

/**
 * Pack message GW_EAS_221.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_gw_eas_221_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_gw_eas_221_t *src_p,
    size_t size);

/**
 * Unpack message GW_EAS_221.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_gw_eas_221_unpack(
    struct ev_can_ccm_4_0_gw_eas_221_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_gw_eas_221_eas_motspd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_eas_221_eas_motspd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_eas_221_eas_motspd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_eas_221_eas_eashvil_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_eas_221_eas_eashvil_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_eas_221_eas_eashvil_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_eas_221_eas_crtsts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_eas_221_eas_crtsts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_eas_221_eas_crtsts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_eas_221_eas_ip_mtemp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_eas_221_eas_ip_mtemp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_eas_221_eas_ip_mtemp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_eas_221_eas_ctrlrsts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_eas_221_eas_ctrlrsts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_eas_221_eas_ctrlrsts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_eas_221_eas_crtpwr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_eas_221_eas_crtpwr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_eas_221_eas_crtpwr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_eas_221_eas_ctrlrcrt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_eas_221_eas_ctrlrcrt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_eas_221_eas_ctrlrcrt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_eas_221_eas_ctrlrvolt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_eas_221_eas_ctrlrvolt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_eas_221_eas_ctrlrvolt_is_in_range(uint8_t value);

/**
 * Pack message GW_VCU_250.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_gw_vcu_250_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_gw_vcu_250_t *src_p,
    size_t size);

/**
 * Unpack message GW_VCU_250.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_gw_vcu_250_unpack(
    struct ev_can_ccm_4_0_gw_vcu_250_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_250_vcu_pump_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_250_vcu_pump_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_250_vcu_pump_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_250_vcu_mid_door_ajar_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_250_vcu_mid_door_ajar_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_250_vcu_mid_door_ajar_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_250_vcu_actual_rema_range_vd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_250_vcu_actual_rema_range_vd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_250_vcu_actual_rema_range_vd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_250_vcu_cltc_rema_range_vd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_250_vcu_cltc_rema_range_vd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_250_vcu_cltc_rema_range_vd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_250_vcu_pt_cenable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_250_vcu_pt_cenable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_250_vcu_pt_cenable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_250_vcu_accmenable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_250_vcu_accmenable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_250_vcu_accmenable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_gw_vcu_250_vcu_vehicle_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_250_vcu_vehicle_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_250_vcu_vehicle_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_gw_vcu_250_vcu_actual_rema_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_250_vcu_actual_rema_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_250_vcu_actual_rema_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_gw_vcu_250_vcu_cltc_rema_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_250_vcu_cltc_rema_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_250_vcu_cltc_rema_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_250_vcu_livecounter_0x250_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_250_vcu_livecounter_0x250_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_250_vcu_livecounter_0x250_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_vcu_250_vcu_checksum_0x250_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_vcu_250_vcu_checksum_0x250_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_vcu_250_vcu_checksum_0x250_is_in_range(uint8_t value);

/**
 * Pack message GW_AC_233.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_gw_ac_233_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_gw_ac_233_t *src_p,
    size_t size);

/**
 * Unpack message GW_AC_233.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_gw_ac_233_unpack(
    struct ev_can_ccm_4_0_gw_ac_233_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_233_ac_evaporatortemp_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_233_ac_evaporatortemp_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_233_ac_evaporatortemp_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_233_ac_over_voltage_protection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_233_ac_over_voltage_protection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_233_ac_over_voltage_protection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_233_ac_under_voltage_protection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_233_ac_under_voltage_protection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_233_ac_under_voltage_protection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_233_ac_blower_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_233_ac_blower_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_233_ac_blower_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_233_ac_ai_rdistribution_mode_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_233_ac_ai_rdistribution_mode_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_233_ac_ai_rdistribution_mode_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_233_ac_fault_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_233_ac_fault_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_233_ac_fault_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_233_ac_ptc_over_heat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_233_ac_ptc_over_heat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_233_ac_ptc_over_heat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_233_ac_pt_ctemp_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_233_ac_pt_ctemp_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_233_ac_pt_ctemp_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_gw_ac_233_ac_eas_speed_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_233_ac_eas_speed_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_233_ac_eas_speed_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_233_ac_ptcp_power_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_233_ac_ptcp_power_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_233_ac_ptcp_power_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_233_ac_press_swtich_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_233_ac_press_swtich_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_233_ac_press_swtich_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_233_ac_livecounter_0x233_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_233_ac_livecounter_0x233_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_233_ac_livecounter_0x233_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_233_ac_checksum_0x233_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_233_ac_checksum_0x233_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_233_ac_checksum_0x233_is_in_range(uint8_t value);

/**
 * Pack message VCU_610.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_vcu_610_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_vcu_610_t *src_p,
    size_t size);

/**
 * Unpack message VCU_610.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_vcu_610_unpack(
    struct ev_can_ccm_4_0_vcu_610_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_vcu_610_vcu_sofeware_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_610_vcu_sofeware_num_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_610_vcu_sofeware_num_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_vcu_610_vcu_hardware_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_610_vcu_hardware_num_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_610_vcu_hardware_num_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_vcu_610_vcu_year_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_610_vcu_year_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_610_vcu_year_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_vcu_610_vcu_month_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_610_vcu_month_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_610_vcu_month_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_vcu_610_vcu_day_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_610_vcu_day_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_610_vcu_day_is_in_range(uint8_t value);

/**
 * Pack message GW_AC_232.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_gw_ac_232_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_gw_ac_232_t *src_p,
    size_t size);

/**
 * Unpack message GW_AC_232.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_gw_ac_232_unpack(
    struct ev_can_ccm_4_0_gw_ac_232_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_232_ac_blower_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_232_ac_blower_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_232_ac_blower_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_232_ac_fan_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_232_ac_fan_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_232_ac_fan_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_232_ac_fresh_reci_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_232_ac_fresh_reci_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_232_ac_fresh_reci_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_232_ac_front_defrost_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_232_ac_front_defrost_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_232_ac_front_defrost_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_232_ac_heat_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_232_ac_heat_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_232_ac_heat_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_232_ac_havc_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_232_ac_havc_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_232_ac_havc_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_232_ac_ai_rdistribution_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_232_ac_ai_rdistribution_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_232_ac_ai_rdistribution_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_232_ac_a_cstate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_232_ac_a_cstate_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_232_ac_a_cstate_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_232_ac_left_set_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_232_ac_left_set_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_232_ac_left_set_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_232_ac_fan_pwm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_232_ac_fan_pwm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_232_ac_fan_pwm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_232_ac_fan_feed_back_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_232_ac_fan_feed_back_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_232_ac_fan_feed_back_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_ac_232_ac_evaporator_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_232_ac_evaporator_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_232_ac_evaporator_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_gw_ac_232_ac_pt_ctemp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_ac_232_ac_pt_ctemp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_ac_232_ac_pt_ctemp_is_in_range(uint16_t value);

/**
 * Pack message GW_BCM_330.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_gw_bcm_330_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_gw_bcm_330_t *src_p,
    size_t size);

/**
 * Unpack message GW_BCM_330.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_gw_bcm_330_unpack(
    struct ev_can_ccm_4_0_gw_bcm_330_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_position_light_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_position_light_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_position_light_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_high_beam_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_high_beam_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_high_beam_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_low_beam_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_low_beam_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_low_beam_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_turn_indcr_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_turn_indcr_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_turn_indcr_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_turn_indcr_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_turn_indcr_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_turn_indcr_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_hazard_light_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_hazard_light_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_hazard_light_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_position_light_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_position_light_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_position_light_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_rr_door_ajar_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_rr_door_ajar_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_rr_door_ajar_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_fr_door_ajar_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_fr_door_ajar_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_fr_door_ajar_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_fl_door_ajar_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_fl_door_ajar_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_fl_door_ajar_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_rear_fog_light_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_rear_fog_light_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_rear_fog_light_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_tr_cls_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_tr_cls_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_tr_cls_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_remote_car_search_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_remote_car_search_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_remote_car_search_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_power_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_power_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_power_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_ccm_open_door_warn_feed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_ccm_open_door_warn_feed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_ccm_open_door_warn_feed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_dtc_fault_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_dtc_fault_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_dtc_fault_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_veh_alrm_sys_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_veh_alrm_sys_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_veh_alrm_sys_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_drivelock_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_drivelock_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_drivelock_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_reversinglight_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_reversinglight_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_reversinglight_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_brakelight_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_brakelight_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_brakelight_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_interiorlight_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_interiorlight_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_interiorlight_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_right_mirror_set_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_right_mirror_set_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_right_mirror_set_ack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_left_mirror_set_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_left_mirror_set_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_left_mirror_set_ack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_park_un_lock_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_park_un_lock_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_park_un_lock_ack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_auto_lock_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_auto_lock_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_auto_lock_ack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_auto_unlock_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_auto_unlock_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_auto_unlock_ack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_livecounter_0x330_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_livecounter_0x330_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_livecounter_0x330_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_gw_bcm_330_bcm_checksum_0x330_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_gw_bcm_330_bcm_checksum_0x330_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_gw_bcm_330_bcm_checksum_0x330_is_in_range(uint8_t value);

/**
 * Pack message CCM_310.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_ccm_310_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_ccm_310_t *src_p,
    size_t size);

/**
 * Unpack message CCM_310.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_ccm_310_unpack(
    struct ev_can_ccm_4_0_ccm_310_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_310_ccm_a_ckey_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_310_ccm_a_ckey_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_310_ccm_a_ckey_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_310_ccm_ac_havc_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_310_ccm_ac_havc_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_310_ccm_ac_havc_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_310_ccm_vehicle_spd_dsp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_310_ccm_vehicle_spd_dsp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_310_ccm_vehicle_spd_dsp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_310_ccm_livecounter_0x310_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_310_ccm_livecounter_0x310_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_310_ccm_livecounter_0x310_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_310_ccm_checksum_0x310_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_310_ccm_checksum_0x310_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_310_ccm_checksum_0x310_is_in_range(uint8_t value);

/**
 * Pack message BMS_620.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_bms_620_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_bms_620_t *src_p,
    size_t size);

/**
 * Unpack message BMS_620.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_bms_620_unpack(
    struct ev_can_ccm_4_0_bms_620_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ev_can_ccm_4_0_bms_620_bms_softwareversion_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_620_bms_softwareversion_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_620_bms_softwareversion_is_in_range(uint32_t value);

/**
 * Pack message BMS_570.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_bms_570_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_bms_570_t *src_p,
    size_t size);

/**
 * Unpack message BMS_570.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_bms_570_unpack(
    struct ev_can_ccm_4_0_bms_570_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_570_b2_v_v_frame_no_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_570_b2_v_v_frame_no_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_570_b2_v_v_frame_no_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_570_b2_v_v_cell_volt_n1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_570_b2_v_v_cell_volt_n1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_570_b2_v_v_cell_volt_n1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_570_b2_v_v_cell_volt_n2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_570_b2_v_v_cell_volt_n2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_570_b2_v_v_cell_volt_n2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_570_b2_v_v_cell_volt_n3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_570_b2_v_v_cell_volt_n3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_570_b2_v_v_cell_volt_n3_is_in_range(uint16_t value);

/**
 * Pack message BMS_580.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_bms_580_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_bms_580_t *src_p,
    size_t size);

/**
 * Unpack message BMS_580.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_bms_580_unpack(
    struct ev_can_ccm_4_0_bms_580_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_580_b2_v_t_frame_no_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_580_b2_v_t_frame_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_580_b2_v_t_frame_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_580_b2_v_t_cell_temp_n7_is_in_range(uint8_t value);

/**
 * Pack message BMS_590.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_bms_590_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_bms_590_t *src_p,
    size_t size);

/**
 * Unpack message BMS_590.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_bms_590_unpack(
    struct ev_can_ccm_4_0_bms_590_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_590_b2_v_gbsn_frame_no_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_590_b2_v_gbsn_frame_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_590_b2_v_gbsn_frame_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_1_7_13_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_1_7_13_19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_1_7_13_19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_2_8_14_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_2_8_14_20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_2_8_14_20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_3_9_15_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_3_9_15_21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_3_9_15_21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_4_10_16_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_4_10_16_22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_4_10_16_22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_5_11_17_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_5_11_17_23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_5_11_17_23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_6_12_18_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_6_12_18_24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_590_b2_v_gbsn_sys_code_6_12_18_24_is_in_range(uint8_t value);

/**
 * Pack message VCU_661.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_vcu_661_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_vcu_661_t *src_p,
    size_t size);

/**
 * Unpack message VCU_661.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_vcu_661_unpack(
    struct ev_can_ccm_4_0_vcu_661_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_vcu_661_vcu_work_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_661_vcu_work_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_661_vcu_work_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_vcu_661_vcu_livecounter_0x661_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_661_vcu_livecounter_0x661_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_661_vcu_livecounter_0x661_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_vcu_661_vcu_checksum_0x661_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_vcu_661_vcu_checksum_0x661_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_vcu_661_vcu_checksum_0x661_is_in_range(uint8_t value);

/**
 * Pack message CCM_66C.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_ccm_66_c_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_ccm_66_c_t *src_p,
    size_t size);

/**
 * Unpack message CCM_66C.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_ccm_66_c_unpack(
    struct ev_can_ccm_4_0_ccm_66_c_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_66_c_str_work_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_66_c_str_work_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_66_c_str_work_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_66_c_ccm_nm_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_66_c_ccm_nm_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_66_c_ccm_nm_bit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_66_c_ccm_livecounter_0x66_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_66_c_ccm_livecounter_0x66_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_66_c_ccm_livecounter_0x66_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_66_c_ccm_checksum_0x66_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_66_c_ccm_checksum_0x66_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_66_c_ccm_checksum_0x66_c_is_in_range(uint8_t value);

/**
 * Pack message CCM_630.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_ccm_630_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_ccm_630_t *src_p,
    size_t size);

/**
 * Unpack message CCM_630.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_ccm_630_unpack(
    struct ev_can_ccm_4_0_ccm_630_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_630_tbox_time_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_630_tbox_time_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_630_tbox_time_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_630_tbox_year_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_630_tbox_year_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_630_tbox_year_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_630_tbox_month_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_630_tbox_month_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_630_tbox_month_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_630_tbox_day_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_630_tbox_day_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_630_tbox_day_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_630_tbox_hour_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_630_tbox_hour_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_630_tbox_hour_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_630_tbox_minute_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_630_tbox_minute_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_630_tbox_minute_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_630_tbox_second_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_630_tbox_second_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_630_tbox_second_is_in_range(uint8_t value);

/**
 * Pack message CCM_558.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_ccm_558_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_ccm_558_t *src_p,
    size_t size);

/**
 * Unpack message CCM_558.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_ccm_558_unpack(
    struct ev_can_ccm_4_0_ccm_558_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_ccm_558_ccm_soc_sofeware_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_558_ccm_soc_sofeware_num_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_558_ccm_soc_sofeware_num_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_ccm_558_ccm_soc_hardware_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_558_ccm_soc_hardware_num_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_558_ccm_soc_hardware_num_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_ccm_558_ccm_mcu_sofeware_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_558_ccm_mcu_sofeware_num_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_558_ccm_mcu_sofeware_num_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_ccm_558_ccm_mcu_hardware_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_558_ccm_mcu_hardware_num_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_558_ccm_mcu_hardware_num_is_in_range(uint16_t value);

/**
 * Pack message BMS_313.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_bms_313_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_bms_313_t *src_p,
    size_t size);

/**
 * Unpack message BMS_313.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_bms_313_unpack(
    struct ev_can_ccm_4_0_bms_313_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_313_bms_batterysoc_virtual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_313_bms_batterysoc_virtual_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_313_bms_batterysoc_virtual_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_313_bms_single_chrg_energy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_313_bms_single_chrg_energy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_313_bms_single_chrg_energy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_313_bms_livecounter_0x513_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_313_bms_livecounter_0x513_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_313_bms_livecounter_0x513_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_bms_313_bms_checksum_0x513_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_313_bms_checksum_0x513_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_313_bms_checksum_0x513_is_in_range(uint8_t value);

/**
 * Pack message BMS_314.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_bms_314_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_bms_314_t *src_p,
    size_t size);

/**
 * Unpack message BMS_314.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_bms_314_unpack(
    struct ev_can_ccm_4_0_bms_314_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_314_bms_batt_info4_dc_charg_req_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_314_bms_batt_info4_dc_charg_req_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_314_bms_batt_info4_dc_charg_req_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_314_bms_batt_info4_dc_charg_req_vol_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_314_bms_batt_info4_dc_charg_req_vol_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_314_bms_batt_info4_dc_charg_req_vol_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_314_bms_batt_info4_mach_put_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_314_bms_batt_info4_mach_put_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_314_bms_batt_info4_mach_put_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ev_can_ccm_4_0_bms_314_bms_batt_info4_mach_put_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_bms_314_bms_batt_info4_mach_put_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_bms_314_bms_batt_info4_mach_put_volt_is_in_range(uint16_t value);

/**
 * Pack message CCM_321.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ev_can_ccm_4_0_ccm_321_pack(
    uint8_t *dst_p,
    const struct ev_can_ccm_4_0_ccm_321_t *src_p,
    size_t size);

/**
 * Unpack message CCM_321.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ev_can_ccm_4_0_ccm_321_unpack(
    struct ev_can_ccm_4_0_ccm_321_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_tbox_cpu_temperature_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_tbox_cpu_temperature_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_tbox_cpu_temperature_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_tbox_cpu_temperature_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_tbox_cpu_temperature_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_tbox_cpu_temperature_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_pcb_temperature_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_pcb_temperature_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_pcb_temperature_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_pcb_temperature_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_pcb_temperature_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_pcb_temperature_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_main_power_supply_voltahe_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_main_power_supply_voltahe_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_main_power_supply_voltahe_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_main_power_supply_voltahe_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_main_power_supply_voltahe_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_main_power_supply_voltahe_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_sim_card_not_present_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_sim_card_not_present_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_sim_card_not_present_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_wifi_device_lost_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_wifi_device_lost_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_wifi_device_lost_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_ccm_detects_eas_node_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_ccm_detects_eas_node_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_ccm_detects_eas_node_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_ccm_detects_bms_node_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_ccm_detects_bms_node_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_ccm_detects_bms_node_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_ccm_detects_ipu_node_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_ccm_detects_ipu_node_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_ccm_detects_ipu_node_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_ccm_detects_vcu_node_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_ccm_detects_vcu_node_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_ccm_detects_vcu_node_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_private_can3_bus_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_private_can3_bus_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_private_can3_bus_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_private_can2_bus_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_private_can2_bus_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_private_can2_bus_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_private_can1_bus_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_private_can1_bus_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_private_can1_bus_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_detect_backup_battery_lost_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_detect_backup_battery_lost_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_detect_backup_battery_lost_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_ccm_detects_acu_node_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_ccm_detects_acu_node_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_ccm_detects_acu_node_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_ccm_detects_bcm_node_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_ccm_detects_bcm_node_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_ccm_detects_bcm_node_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ev_can_ccm_4_0_ccm_321_ccm_detects_ac_node_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ev_can_ccm_4_0_ccm_321_ccm_detects_ac_node_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ev_can_ccm_4_0_ccm_321_ccm_detects_ac_node_loss_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
