/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Tue Sep  5 18:18:47 2023.
 */

#ifndef CHASSISE_CAN_CCM_4_0_H
#define CHASSISE_CAN_CCM_4_0_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define CHASSISE_CAN_CCM_4_0_GW_ACU_133_FRAME_ID (0x133u)
#define CHASSISE_CAN_CCM_4_0_GW_ABS_171_FRAME_ID (0x171u)
#define CHASSISE_CAN_CCM_4_0_EPS_300_FRAME_ID (0x300u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_FRAME_ID (0x301u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_FRAME_ID (0x420u)

/* Frame lengths in bytes. */
#define CHASSISE_CAN_CCM_4_0_GW_ACU_133_LENGTH (8u)
#define CHASSISE_CAN_CCM_4_0_GW_ABS_171_LENGTH (8u)
#define CHASSISE_CAN_CCM_4_0_EPS_300_LENGTH (8u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_LENGTH (8u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_LENGTH (8u)

/* Extended or standard frame types. */
#define CHASSISE_CAN_CCM_4_0_GW_ACU_133_IS_EXTENDED (0)
#define CHASSISE_CAN_CCM_4_0_GW_ABS_171_IS_EXTENDED (0)
#define CHASSISE_CAN_CCM_4_0_EPS_300_IS_EXTENDED (0)
#define CHASSISE_CAN_CCM_4_0_EPS_301_IS_EXTENDED (0)
#define CHASSISE_CAN_CCM_4_0_ABS_420_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define CHASSISE_CAN_CCM_4_0_GW_ACU_133_CYCLE_TIME_MS (10u)
#define CHASSISE_CAN_CCM_4_0_GW_ABS_171_CYCLE_TIME_MS (20u)
#define CHASSISE_CAN_CCM_4_0_EPS_300_CYCLE_TIME_MS (200u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_CYCLE_TIME_MS (200u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_CYCLE_TIME_MS (500u)

/* Signal choices. */
#define CHASSISE_CAN_CCM_4_0_GW_ACU_133_ACU_GSENSOR_FAULT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_GW_ACU_133_ACU_GSENSOR_FAULT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_GW_ACU_133_ACU_SYSTEM_STS_INITIALIZE_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_GW_ACU_133_ACU_SYSTEM_STS_STANDBY_CHOICE (1u)
#define CHASSISE_CAN_CCM_4_0_GW_ACU_133_ACU_SYSTEM_STS_RUNNING_CHOICE (2u)
#define CHASSISE_CAN_CCM_4_0_GW_ACU_133_ACU_SYSTEM_STS_FAULT_CHOICE (3u)

#define CHASSISE_CAN_CCM_4_0_GW_ACU_133_ACU_AIRB_WARN_LAMP_ST_AIRBAG_WARNING__LAMP_OFF_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_GW_ACU_133_ACU_AIRB_WARN_LAMP_ST_AIRBAG_WARNING__LAMP_ON_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_GW_ACU_133_ACU_CRASH_OUTP_STS_NO_CRASH_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_GW_ACU_133_ACU_CRASH_OUTP_STS_CRASH_HAPPEN_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_GW_ABS_171_ABS_ABS_FAIL_STATUS_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_GW_ABS_171_ABS_ABS_FAIL_STATUS_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_300_EPS_RUN_STATE______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_300_EPS_RUN_STATE______1_CHOICE (1u)
#define CHASSISE_CAN_CCM_4_0_EPS_300_EPS_RUN_STATE______2_CHOICE (2u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_MOTOR_CURR_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_MOTOR_CURR_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_MOTOR_VOLT_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_MOTOR_VOLT_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_TORQ_SNR_S_SIG_OUT_RNG_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_TORQ_SNR_S_SIG_OUT_RNG_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_TORQ_SNR_P_SIG_OUT_RNG_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_TORQ_SNR_P_SIG_OUT_RNG_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_TORQ_SNR_T1_T2_SIG_SYNC_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_TORQ_SNR_T1_T2_SIG_SYNC_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_TORQ_SNR_T1_SIG_OUT_RNG_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_TORQ_SNR_T1_SIG_OUT_RNG_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_TORQ_SNR_T2_SIG_OUT_RNG_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_TORQ_SNR_T2_SIG_OUT_RNG_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_TORQ_SNR5_V_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_TORQ_SNR5_V_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_CAN_BUS_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_CAN_BUS_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_OVER_VOLT_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_OVER_VOLT_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_UNDER_VOLT_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_UNDER_VOLT_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_UNCALIBRATED_ANGLE_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_UNCALIBRATED_ANGLE_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_OVER_HEAT_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_OVER_HEAT_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_RELAY_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_RELAY_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_MOTOR_CURR_FELLOW_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_MOTOR_CURR_FELLOW_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_MOTOR_DRV_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_MOTOR_DRV_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_VCU_TIME_OUT_FLT______0_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_EPS_301_EPS_VCU_TIME_OUT_FLT______1_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_FR_NO_SIGNAL_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_FR_NO_SIGNAL_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_FR_INTERM_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_FR_INTERM_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_FR_OPEN_SHORT_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_FR_OPEN_SHORT_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_FL_NO_SIGNAL_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_FL_NO_SIGNAL_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_FL_INTERM_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_FL_INTERM_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_FL_OPEN_SHORT_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_FL_OPEN_SHORT_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_POWER_UNDERVOLT_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_POWER_UNDERVOLT_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_POWER_OVERVOLT_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_POWER_OVERVOLT_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_VALVE_RELAY_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_VALVE_RELAY_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_FREQ_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_FREQ_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_RR_NO_SIGNAL_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_RR_NO_SIGNAL_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_RR_INTERM_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_RR_INTERM_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_RR_OPEN_SHORT_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_RR_OPEN_SHORT_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_RL_NO_SIGNAL_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_RL_NO_SIGNAL_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_RL_INTERM_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_RL_INTERM_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_RL_OPEN_SHORT_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_WHEEL_SPEED_RL_OPEN_SHORT_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_OUTLET_VALVE_RR_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_OUTLET_VALVE_RR_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_INLET_VALVE_RR_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_INLET_VALVE_RR_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_OUTLET_VALVE_RL_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_OUTLET_VALVE_RL_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_INLET_VALVE_RL_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_INLET_VALVE_RL_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_OUTLET_VALVE_FR_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_OUTLET_VALVE_FR_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_INLET_VALVE_FR_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_INLET_VALVE_FR_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_OUTLET_VALVE_FL_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_OUTLET_VALVE_FL_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_INLET_VALVE_FL_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_INLET_VALVE_FL_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_CURRENT_MAX_FAULT_LEVEL_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_CURRENT_MAX_FAULT_LEVEL_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_CAN_BUS_OFF_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_CAN_BUS_OFF_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_CAN_HARDWARE_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_CAN_HARDWARE_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_ECU_HARDWARE_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_ECU_HARDWARE_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_MOTOR_RELAY_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_MOTOR_RELAY_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_MOTOR_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_MOTOR_ERR_ERROR_CHOICE (1u)

#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_VALVE_ERR_NO_ERROR_CHOICE (0u)
#define CHASSISE_CAN_CCM_4_0_ABS_420_ABS_VALVE_ERR_ERROR_CHOICE (1u)

/**
 * Signals in message GW_ACU_133.
 *
 * All signal values are as on the CAN bus.
 */
struct chassise_can_ccm_4_0_gw_acu_133_t {
    /**
     * ACUÄÚ²¿´«¸ÐÆ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acu_gsensor_fault;

    /**
     * ACUÏµÍ³¹¤×÷×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acu_system_sts;

    /**
     * ÆøÄÒ¹ÊÕÏÖ¸Ê¾µÆ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acu_airb_warn_lamp_st;

    /**
     * Åö×²ÐÅºÅ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acu_crash_outp_sts;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acu_livecounter_0x133;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acu_checksum_0x133;
};

/**
 * Signals in message GW_ABS_171.
 *
 * All signal values are as on the CAN bus.
 */
struct chassise_can_ccm_4_0_gw_abs_171_t {
    /**
     * ABS¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_abs_fail_status;

    /**
     * Ñ­»·¼ÆÊýÆ÷
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_llivecounter_0x171;

    /**
     * CheckSumÐ£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_checksum_0x171;
};

/**
 * Signals in message EPS_300.
 *
 * All signal values are as on the CAN bus.
 */
struct chassise_can_ccm_4_0_eps_300_t {
    /**
     * EPSÔËÐÐ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_run_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_livecounter_0x300;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_checksum_0x300;
};

/**
 * Signals in message EPS_301.
 *
 * All signal values are as on the CAN bus.
 */
struct chassise_can_ccm_4_0_eps_301_t {
    /**
     * ÖúÁ¦µç»úµçÁ÷Òì³£
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_motor_curr_flt;

    /**
     * ÖúÁ¦µç»úµçÑ¹Òì³£
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_motor_volt_flt;

    /**
     * EPS½Ç¶ÈSÐÅºÅ³¬³öÉè¼Æ·¶Î§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_torq_snr_s_sig_out_rng_flt;

    /**
     * EPS½Ç¶ÈPÐÅºÅ³¬³öÉè¼Æ·¶Î§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_torq_snr_p_sig_out_rng_flt;

    /**
     * EPSÅ¤¾ØÖ÷¡¢¸±ÐÅºÅ²»Æ¥Åä
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_torq_snr_t1_t2_sig_sync_flt;

    /**
     * EPSÅ¤¾ØÖ÷ÐÅºÅ³¬³öÉè¼Æ·¶Î§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_torq_snr_t1_sig_out_rng_flt;

    /**
     * EPSÅ¤¾Ø¸±ÐÅºÅ³¬³öÉè¼Æ·¶Î§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_torq_snr_t2_sig_out_rng_flt;

    /**
     * EPSÅ¤¾Ø´«¸ÐÆ÷µçÔ´µçÑ¹Òì³£
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_torq_snr5_v_flt;

    /**
     * CAN×ÜÏß´íÎó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_can_bus_flt;

    /**
     * EPSµçÔ´µçÑ¹¹ý¸ß
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_over_volt_flt;

    /**
     * EPSµçÔ´µçÑ¹¹ýµÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_under_volt_flt;

    /**
     * EPS½Ç¶ÈÖÐÎ»Î´±ê¶¨
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_uncalibrated_angle_flt;

    /**
     * ECU¹ýÎÂ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_over_heat_flt;

    /**
     * ECU¼ÌµçÆ÷Ê§Ð§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_relay_flt;

    /**
     * ÖúÁ¦µç»úÊµ¼ÊµçÁ÷ºÍÄ¿±êµçÁ÷²îÒì¹ý´ó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_motor_curr_fellow_flt;

    /**
     * ÖúÁ¦µç»úÇý¶¯µçÂ·¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_motor_drv_flt;

    /**
     * ÓëVCU¶ªÊ§Í¨ÐÅ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_vcu_time_out_flt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_livecounter_0x301;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_checksum_0x301;
};

/**
 * Signals in message ABS_420.
 *
 * All signal values are as on the CAN bus.
 */
struct chassise_can_ccm_4_0_abs_420_t {
    /**
     * ÓÒÇ°ÂÖËÙ´«¸ÐÆ÷ÎÞÐÅºÅ/Wheel speed sensor front right (FR) invalid/no signal
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_wheel_speed_fr_no_signal_err;

    /**
     * ÓÒÇ°ÂÖËÙ´«¸ÐÆ÷ÐÅºÅ²»ÎÈ¶¨/·¶Î§¹ý´ó/¼äÐªÐÔ¹ÊÕÏ/Wheel speed sensor front right (FR) range / performance / intermittent
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_wheel_speed_fr_interm_err;

    /**
     * ÓÒÇ°ÂÖËÙ´«¸ÐÆ÷¿ªÂ·»ò¶ÌÂ·/Wheel speed sensor front right (FR) open/short
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_wheel_speed_fr_open_short_err;

    /**
     * ×óÇ°ÂÖËÙ´«¸ÐÆ÷ÎÞÐÅºÅ/Wheel speed sensor front left (FL)invalid/no signal
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_wheel_speed_fl_no_signal_err;

    /**
     * ×óÇ°ÂÖËÙ´«¸ÐÆ÷ÐÅºÅ²»ÎÈ¶¨/·¶Î§¹ý´ó/¼äÐªÐÔ¹ÊÕÏ/ Wheel speed sensor front left (FL) range / performance / intermittent
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_wheel_speed_fl_interm_err;

    /**
     * ×óÇ°ÂÖËÙ´«¸ÐÆ÷¿ªÂ·»ò¶ÌÂ·/ Wheel speed sensor front left (FL)open/short
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_wheel_speed_fl_open_short_err;

    /**
     * ECU ¹¤×÷µçÔ´£º¹ýµÍ/ Battery voltage low
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_power_undervolt;

    /**
     * ECU ¹¤×÷µçÔ´£º¹ý¸ß/  Battery voltage high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_power_overvolt;

    /**
     * ·§¼ÌµçÆ÷¹ÊÕÏ Valve relay error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_valve_relay_err;

    /**
     * ÂÖËÙ´«¸ÐÆ÷ÆµÂÊ´íÎó¡¢»ò³ÝÊý´íÎó¡¢»òÂÖÌ¥´íÎó/ Wheel-speed sensor frequency error £¨generic wheel speed-sensor error£¬slipping or
     * wrong toothed£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_wheel_speed_freq_err;

    /**
     * ÓÒºóÂÖËÙ´«¸ÐÆ÷ÎÞÐÅºÅ/Wheel speed sensor rear right (RR) invalid/no signal
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_wheel_speed_rr_no_signal_err;

    /**
     * ÓÒºóÂÖËÙ´«¸ÐÆ÷ÐÅºÅ²»ÎÈ¶¨/·¶Î§¹ý´ó/¼äÐªÐÔ¹ÊÕÏ/Wheel speed sensor rear right (RR) range / performance / intermittent
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_wheel_speed_rr_interm_err;

    /**
     * ÓÒºóÂÖËÙ´«¸ÐÆ÷¿ªÂ·»ò¶ÌÂ·/Wheel speed sensor rear right (RR) open/short
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_wheel_speed_rr_open_short_err;

    /**
     * ×óºóÂÖËÙ´«¸ÐÆ÷ÎÞÐÅºÅ/Wheel speed sensor rear left (RL) invalid/no signal
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_wheel_speed_rl_no_signal_err;

    /**
     * ×óºóÂÖËÙ´«¸ÐÆ÷ÐÅºÅ²»ÎÈ¶¨/·¶Î§¹ý´ó/¼äÐªÐÔ¹ÊÕÏ/Wheel speed sensor rear left (RL) range / performance / intermittent
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_wheel_speed_rl_interm_err;

    /**
     * ×óºóÂÖËÙ´«¸ÐÆ÷¿ªÂ·»ò¶ÌÂ·/Wheel speed sensor rear right (RL)open/short
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_wheel_speed_rl_open_short_err;

    /**
     * ÓÒºó·ÅÓÍ·§¹ÊÕÏ Valve fault, outlet valve RR
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_outlet_valve_rr_err;

    /**
     * ÓÒºó½øÓÍ·§¹ÊÕÏ Valve fault, inlet valve RR
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_inlet_valve_rr_err;

    /**
     * ×óºó·ÅÓÍ·§¹ÊÕÏ Valve fault, outlet valve RL
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_outlet_valve_rl_err;

    /**
     * ×óºó½øÓÍ·§¹ÊÕÏ Valve fault, inlet valve RL
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_inlet_valve_rl_err;

    /**
     * ÓÒÇ°·ÅÓÍ·§¹ÊÕÏ Valve fault, outlet valve FR
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_outlet_valve_fr_err;

    /**
     * ÓÒÇ°½øÓÍ·§¹ÊÕÏ Valve fault, inlet valve FR
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_inlet_valve_fr_err;

    /**
     * ×óÇ°·ÅÓÍ·§¹ÊÕÏ Valve fault, outlet valve FL
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_outlet_valve_fl_err;

    /**
     * ×óÇ°½øÓÍ·§¹ÊÕÏ Valve fault, inlet valve FL
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_inlet_valve_fl_err;

    /**
     * µ±Ç°×î¸ß¹ÊÕÏµÈ¼¶
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_current_max_fault_level;

    /**
     * CAN ×ÜÏß¹Ø±Õ CAN Bus Off error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_can_bus_off_err;

    /**
     * CAN Ó²¼þ¹ÊÕÏ CAN hardware error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_can_hardware_err;

    /**
     * ECU Ó²¼þ¹ÊÕÏ ECU hardware error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_ecu_hardware_err;

    /**
     * µç»ú¼ÌµçÆ÷¹ÊÕÏ Motor relay error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_motor_relay_err;

    /**
     * µç»ú¹ÊÕÏ Motor error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_motor_err;

    /**
     * ·§´íÎó£¨¹ýÈÈ¡¢¹ýÁ÷¡¢¶ÔµØ¶ÌÂ·¡¢ÐÅºÅ´íÎó¡¢Ó²¼þ´íÎó£©
     * Valve fault (overheat protection, signal invalid, hardware fault )
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_valve_err;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_livecounter_0x420;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_checksum_0x420;
};

/**
 * Pack message GW_ACU_133.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int chassise_can_ccm_4_0_gw_acu_133_pack(
    uint8_t *dst_p,
    const struct chassise_can_ccm_4_0_gw_acu_133_t *src_p,
    size_t size);

/**
 * Unpack message GW_ACU_133.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int chassise_can_ccm_4_0_gw_acu_133_unpack(
    struct chassise_can_ccm_4_0_gw_acu_133_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_gw_acu_133_acu_gsensor_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_gw_acu_133_acu_gsensor_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_gw_acu_133_acu_gsensor_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_gw_acu_133_acu_system_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_gw_acu_133_acu_system_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_gw_acu_133_acu_system_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_gw_acu_133_acu_airb_warn_lamp_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_gw_acu_133_acu_airb_warn_lamp_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_gw_acu_133_acu_airb_warn_lamp_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_gw_acu_133_acu_crash_outp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_gw_acu_133_acu_crash_outp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_gw_acu_133_acu_crash_outp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_gw_acu_133_acu_livecounter_0x133_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_gw_acu_133_acu_livecounter_0x133_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_gw_acu_133_acu_livecounter_0x133_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_gw_acu_133_acu_checksum_0x133_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_gw_acu_133_acu_checksum_0x133_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_gw_acu_133_acu_checksum_0x133_is_in_range(uint8_t value);

/**
 * Pack message GW_ABS_171.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int chassise_can_ccm_4_0_gw_abs_171_pack(
    uint8_t *dst_p,
    const struct chassise_can_ccm_4_0_gw_abs_171_t *src_p,
    size_t size);

/**
 * Unpack message GW_ABS_171.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int chassise_can_ccm_4_0_gw_abs_171_unpack(
    struct chassise_can_ccm_4_0_gw_abs_171_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_gw_abs_171_abs_abs_fail_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_gw_abs_171_abs_abs_fail_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_gw_abs_171_abs_abs_fail_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_gw_abs_171_abs_llivecounter_0x171_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_gw_abs_171_abs_llivecounter_0x171_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_gw_abs_171_abs_llivecounter_0x171_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_gw_abs_171_abs_checksum_0x171_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_gw_abs_171_abs_checksum_0x171_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_gw_abs_171_abs_checksum_0x171_is_in_range(uint8_t value);

/**
 * Pack message EPS_300.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int chassise_can_ccm_4_0_eps_300_pack(
    uint8_t *dst_p,
    const struct chassise_can_ccm_4_0_eps_300_t *src_p,
    size_t size);

/**
 * Unpack message EPS_300.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int chassise_can_ccm_4_0_eps_300_unpack(
    struct chassise_can_ccm_4_0_eps_300_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_300_eps_run_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_300_eps_run_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_300_eps_run_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_300_eps_livecounter_0x300_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_300_eps_livecounter_0x300_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_300_eps_livecounter_0x300_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_300_eps_checksum_0x300_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_300_eps_checksum_0x300_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_300_eps_checksum_0x300_is_in_range(uint8_t value);

/**
 * Pack message EPS_301.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int chassise_can_ccm_4_0_eps_301_pack(
    uint8_t *dst_p,
    const struct chassise_can_ccm_4_0_eps_301_t *src_p,
    size_t size);

/**
 * Unpack message EPS_301.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int chassise_can_ccm_4_0_eps_301_unpack(
    struct chassise_can_ccm_4_0_eps_301_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_motor_curr_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_motor_curr_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_motor_curr_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_motor_volt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_motor_volt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_motor_volt_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_torq_snr_s_sig_out_rng_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_torq_snr_s_sig_out_rng_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_torq_snr_s_sig_out_rng_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_torq_snr_p_sig_out_rng_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_torq_snr_p_sig_out_rng_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_torq_snr_p_sig_out_rng_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_torq_snr_t1_t2_sig_sync_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_torq_snr_t1_t2_sig_sync_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_torq_snr_t1_t2_sig_sync_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_torq_snr_t1_sig_out_rng_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_torq_snr_t1_sig_out_rng_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_torq_snr_t1_sig_out_rng_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_torq_snr_t2_sig_out_rng_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_torq_snr_t2_sig_out_rng_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_torq_snr_t2_sig_out_rng_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_torq_snr5_v_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_torq_snr5_v_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_torq_snr5_v_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_can_bus_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_can_bus_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_can_bus_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_over_volt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_over_volt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_over_volt_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_under_volt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_under_volt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_under_volt_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_uncalibrated_angle_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_uncalibrated_angle_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_uncalibrated_angle_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_over_heat_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_over_heat_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_over_heat_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_relay_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_relay_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_relay_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_motor_curr_fellow_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_motor_curr_fellow_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_motor_curr_fellow_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_motor_drv_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_motor_drv_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_motor_drv_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_vcu_time_out_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_vcu_time_out_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_vcu_time_out_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_livecounter_0x301_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_livecounter_0x301_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_livecounter_0x301_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_eps_301_eps_checksum_0x301_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_eps_301_eps_checksum_0x301_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_eps_301_eps_checksum_0x301_is_in_range(uint8_t value);

/**
 * Pack message ABS_420.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int chassise_can_ccm_4_0_abs_420_pack(
    uint8_t *dst_p,
    const struct chassise_can_ccm_4_0_abs_420_t *src_p,
    size_t size);

/**
 * Unpack message ABS_420.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int chassise_can_ccm_4_0_abs_420_unpack(
    struct chassise_can_ccm_4_0_abs_420_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fr_no_signal_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fr_no_signal_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fr_no_signal_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fr_interm_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fr_interm_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fr_interm_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fr_open_short_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fr_open_short_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fr_open_short_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fl_no_signal_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fl_no_signal_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fl_no_signal_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fl_interm_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fl_interm_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fl_interm_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fl_open_short_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fl_open_short_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_wheel_speed_fl_open_short_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_power_undervolt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_power_undervolt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_power_undervolt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_power_overvolt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_power_overvolt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_power_overvolt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_valve_relay_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_valve_relay_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_valve_relay_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_wheel_speed_freq_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_wheel_speed_freq_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_wheel_speed_freq_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rr_no_signal_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rr_no_signal_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rr_no_signal_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rr_interm_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rr_interm_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rr_interm_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rr_open_short_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rr_open_short_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rr_open_short_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rl_no_signal_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rl_no_signal_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rl_no_signal_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rl_interm_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rl_interm_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rl_interm_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rl_open_short_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rl_open_short_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_wheel_speed_rl_open_short_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_outlet_valve_rr_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_outlet_valve_rr_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_outlet_valve_rr_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_inlet_valve_rr_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_inlet_valve_rr_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_inlet_valve_rr_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_outlet_valve_rl_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_outlet_valve_rl_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_outlet_valve_rl_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_inlet_valve_rl_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_inlet_valve_rl_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_inlet_valve_rl_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_outlet_valve_fr_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_outlet_valve_fr_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_outlet_valve_fr_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_inlet_valve_fr_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_inlet_valve_fr_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_inlet_valve_fr_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_outlet_valve_fl_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_outlet_valve_fl_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_outlet_valve_fl_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_inlet_valve_fl_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_inlet_valve_fl_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_inlet_valve_fl_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_current_max_fault_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_current_max_fault_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_current_max_fault_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_can_bus_off_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_can_bus_off_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_can_bus_off_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_can_hardware_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_can_hardware_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_can_hardware_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_ecu_hardware_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_ecu_hardware_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_ecu_hardware_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_motor_relay_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_motor_relay_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_motor_relay_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_motor_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_motor_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_motor_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_valve_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_valve_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_valve_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_livecounter_0x420_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_livecounter_0x420_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_livecounter_0x420_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t chassise_can_ccm_4_0_abs_420_abs_checksum_0x420_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double chassise_can_ccm_4_0_abs_420_abs_checksum_0x420_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool chassise_can_ccm_4_0_abs_420_abs_checksum_0x420_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
