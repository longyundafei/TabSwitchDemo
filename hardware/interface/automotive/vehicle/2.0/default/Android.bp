// Copyright (C) 2017 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package {
    // See: http://go/android-license-faq
    // A large-scale-change added 'default_applicable_licenses' to import
    // all of the 'license_kinds' from "hardware_interfaces_license"
    // to get the below license kinds:
    //   SPDX-license-identifier-Apache-2.0
    default_applicable_licenses: ["hardware_interfaces_license"],
}


cc_defaults {
    name: "vhal_v2_0_defaults",
    shared_libs: [
        "libhidlbase",
        "liblog",
        "libutils",
        "android.hardware.automotive.vehicle@2.0",
    ],
    cflags: [
        "-Wall",
        "-Wextra",
        "-Werror",
    ],
}

cc_defaults {
    name: "vhal_v2_0_target_defaults",
    defaults: ["vhal_v2_0_defaults"],
    shared_libs: [
        "libbinder_ndk",
        "android.automotive.watchdog-V2-ndk_platform",
    ],
}

cc_library_headers {
    name: "vhal_v2_0_common_headers",
    vendor: true,
    export_include_dirs: ["common/include/vhal_v2_0"],
}

// Vehicle reference implementation lib
cc_library {
    name: "android.hardware.automotive.vehicle@2.0-manager-lib",
    vendor: true,
    defaults: ["vhal_v2_0_target_defaults"],
    srcs: [
        "common/src/Obd2SensorStore.cpp",
        "common/src/SubscriptionManager.cpp",
        "common/src/VehicleHalManager.cpp",
        "common/src/VehicleObjectPool.cpp",
        "common/src/VehiclePropertyStore.cpp",
        "common/src/VehicleUtils.cpp",
        "common/src/VmsUtils.cpp",
        "common/src/WatchdogClient.cpp",
    ],
    shared_libs: [
        "libbase",
        "libjsoncpp",
        "libbinder",
        "libprotobuf-cpp-lite",
        "libdl",
        "liblog",
        "libutils",
        "libcutils",
        "libhardware",
        "libhidlbase",
        "libbinder_ndk",
        "libcrypto",
        "android.hardware.gecko_uds-V1-ndk_platform",
    ],
    local_include_dirs: ["common/include/vhal_v2_0"],
    export_include_dirs: ["common/include"],
    static_libs: [
        "android.hardware.automotive.vehicle@2.0-libproto-native",
    ],
}

// Vehicle default VehicleHAL implementation
cc_library_static {
    name: "android.hardware.automotive.vehicle@2.0-default-impl-lib",
    vendor: true,
    defaults: ["vhal_v2_0_target_defaults"],
    cflags: ["-DENABLE_VENDOR_CLUSTER_PROPERTY_FOR_TESTING"],
    srcs: [
        "impl/vhal_v2_0/CommConn.cpp",
        "impl/vhal_v2_0/PowerStatusQueue.cpp",
        "impl/vhal_v2_0/BinaryQueue.cpp",
        "impl/vhal_v2_0/property_manager.cpp",
        "impl/vhal_v2_0/GarageModeServerSideHandler.cpp",
        "impl/vhal_v2_0/EmulatedVehicleConnector.cpp",
        "impl/vhal_v2_0/EmulatedVehicleHal.cpp",
        "impl/vhal_v2_0/VehicleHalClient.cpp",
        "impl/vhal_v2_0/VehicleHalServer.cpp",
        "impl/vhal_v2_0/VehicleEmulator.cpp",
        "impl/vhal_v2_0/PipeComm.cpp",
        "impl/vhal_v2_0/ProtoMessageConverter.cpp",
        "impl/vhal_v2_0/SocketComm.cpp",
        "impl/vhal_v2_0/LinearFakeValueGenerator.cpp",
        "impl/vhal_v2_0/JsonFakeValueGenerator.cpp",
        "impl/vhal_v2_0/GeneratorHub.cpp",
        "impl/vhal_v2_0/qemu_pipe.cpp",
        "impl/vhal_v2_0/SerialCommunication.cpp",
        "impl/vhal_v2_0/MessagePrase.cpp",
        "impl/vhal_v2_0/FunctionMap.cpp",
        "impl/vhal_v2_0/HandlerCanData.cpp",
        "impl/vhal_v2_0/body_can_ccm_4_0.c",
        "impl/vhal_v2_0/chassise_can_ccm_4_0.c",
        "impl/vhal_v2_0/ev_can_ccm_4_0.c",
        "impl/vhal_v2_0/mcu.c",
        "impl/vhal_v2_0/CanMap.cpp",
        "impl/vhal_v2_0/SendCanMap.cpp",
        "impl/vhal_v2_0/SendQueue.cpp",
        "impl/vhal_v2_0/SendQueueV1_1.cpp",
        "impl/vhal_v2_0/RecordData.cpp",
        "impl/vhal_v2_0/CommunicationManager.cpp",
        "impl/vhal_v2_0/EthernetCommunication.cpp",
        "impl/vhal_v2_0/SPICommunication.cpp",
        "impl/vhal_v2_0/config_parser.cpp",
        "impl/vhal_v2_0/vehicle_config_parser.cpp",
        "impl/vhal_v2_0/me11_cmx_baccanfd_ots_car_v02.c",
        "impl/vhal_v2_0/ConfigurationWordParse.cpp",
    ],
    local_include_dirs: [
        "common/include/vhal_v2_0",
//        "impl/vhal_v2_0/can",
//        "impl/vhal_v2_0/can/v48_can_4_0"
    ],
    export_include_dirs: ["impl"],
    whole_static_libs: [
        "android.hardware.automotive.vehicle@2.0-emulated-user-hal-lib",
        "android.hardware.automotive.vehicle@2.0-manager-lib",
    ],
    shared_libs: [
        "libbase",
        "libjsoncpp",
        "libbinder",
        "libprotobuf-cpp-lite",
        "libdl",
        "liblog",
        "libutils",
        "libcutils",
        "libhardware",
        "libhidlbase",
        "libbinder_ndk",
        "libcrypto",
        "android.hardware.gecko_uds-V1-ndk_platform",
    ],
    static_libs: [
        "android.hardware.automotive.vehicle@2.0-libproto-native",
    ],
}

// Library used  to emulate User HAL behavior through lshal debug requests.
cc_library_static {
    name: "android.hardware.automotive.vehicle@2.0-emulated-user-hal-lib",
    vendor: true,
    defaults: ["vhal_v2_0_target_defaults"],
    srcs: [
        "impl/vhal_v2_0/EmulatedUserHal.cpp",
    ],
    whole_static_libs: [
        "android.hardware.automotive.vehicle@2.0-user-hal-helper-lib",
    ],
}

// Vehicle HAL Server reference impl lib
cc_library_static {
    name: "android.hardware.automotive.vehicle@2.0-server-common-lib",
    vendor: true,
    host_supported: true,
    defaults: ["vhal_v2_0_defaults"],
    local_include_dirs: ["common/include/vhal_v2_0"],
    export_include_dirs: ["common/include"],
    srcs: [
        "common/src/Obd2SensorStore.cpp",
        "common/src/VehicleObjectPool.cpp",
        "common/src/VehiclePropertyStore.cpp",
        "common/src/VehicleUtils.cpp",
    ],
}

// Vehicle HAL Server default implementation
cc_library_static {
    name: "android.hardware.automotive.vehicle@2.0-server-impl-lib",
    vendor: true,
    host_supported: true,
    defaults: ["vhal_v2_0_defaults"],
    local_include_dirs: ["common/include/vhal_v2_0"],
    export_include_dirs: ["impl"],
    srcs: [
        "impl/vhal_v2_0/GeneratorHub.cpp",
        "impl/vhal_v2_0/JsonFakeValueGenerator.cpp",
        "impl/vhal_v2_0/LinearFakeValueGenerator.cpp",
        "impl/vhal_v2_0/ProtoMessageConverter.cpp",
        "impl/vhal_v2_0/VehicleHalServer.cpp",
    ],
    whole_static_libs: [
        "android.hardware.automotive.vehicle@2.0-server-common-lib",
        "android.hardware.automotive.vehicle@2.0-user-hal-helper-lib",
    ],
    static_libs: [
        "android.hardware.automotive.vehicle@2.0-libproto-native",
    ],
    shared_libs: [
        "libbase",
        "libjsoncpp",
    ],
}

cc_test {
    name: "android.hardware.automotive.vehicle@2.0-manager-unit-tests",
    vendor: true,
    defaults: ["vhal_v2_0_target_defaults"],
    whole_static_libs: ["android.hardware.automotive.vehicle@2.0-manager-lib"],
    srcs: [
        "tests/RecurrentTimer_test.cpp",
        "tests/SubscriptionManager_test.cpp",
        "tests/VehicleHalManager_test.cpp",
        "tests/VehicleObjectPool_test.cpp",
        "tests/VehiclePropConfigIndex_test.cpp",
        "tests/VmsUtils_test.cpp",
    ],
    shared_libs: [
        "libbase",
        "libcutils",
    ],
    header_libs: ["libbase_headers"],
    test_suites: ["general-tests"],
}

cc_test {
    name: "android.hardware.automotive.vehicle@2.0-default-impl-unit-tests",
    vendor: true,
    defaults: ["vhal_v2_0_target_defaults"],
    srcs: [
        "impl/vhal_v2_0/tests/ProtoMessageConverter_test.cpp",
    ],
    static_libs: [
        "android.hardware.automotive.vehicle@2.0-default-impl-lib",
        "android.hardware.automotive.vehicle@2.0-libproto-native",
        "libprotobuf-cpp-lite",
    ],
    test_suites: ["general-tests"],
}

cc_binary {
    name: "android.hardware.automotive.vehicle@2.0-service",
    defaults: ["vhal_v2_0_target_defaults"],
    vintf_fragments: [
        "android.hardware.automotive.vehicle@2.0-service.xml",
    ],
    init_rc: ["android.hardware.automotive.vehicle@2.0-service.rc"],
    vendor: true,
    relative_install_path: "hw",
    srcs: ["VehicleService.cpp",
            "impl/vhal_v2_0/data_parse/PropDataRequestAndSet.cpp",
    ],
    shared_libs: [
        "libbase",
        "libjsoncpp",
        "libprotobuf-cpp-lite",
        "libhidlbase",
        "libcrypto",
        "liblog",
        "libcutils",
        "android.hardware.gecko_uds-V1-ndk_platform",
    ],
    static_libs: [
        "android.hardware.automotive.vehicle@2.0-manager-lib",
        "android.hardware.automotive.vehicle@2.0-default-impl-lib",
        "android.hardware.automotive.vehicle@2.0-libproto-native",
    ],
    header_libs: ["libbase_headers"],
}

cc_binary {
    name: "config_f101",
    srcs: ["impl/vhal_v2_0/config_101_opt.cpp"],
    vendor: true,
    shared_libs: [
	    "liblog",
        "libbase",
        "libcutils",
    ],
    header_libs: ["libbase_headers"],
}

//cc_binary {
//    name: "android.hardware.automotive.vehicle@2.0-client",
cc_library_shared {
    name: "libota_api",
    defaults: ["vhal_v2_0_target_defaults"],
    compile_multilib: "64",
    vendor: true,
    relative_install_path: "hw",
    srcs: ["client/MyVehicleHalClient.cpp",
    ],
    shared_libs: [
        "libbase",
        "libjsoncpp",
        "libprotobuf-cpp-lite",
        "libhidlbase",
        "libcrypto",
        "liblog",
        "libcutils",
        "android.hardware.gecko_uds-V1-ndk_platform",
        "android.hardware.automotive.vehicle@2.0",
    ],
    header_libs: ["libbase_headers"],
}

cc_fuzz {
    name: "vehicleManager_fuzzer",
    vendor: true,
    defaults: ["vhal_v2_0_target_defaults"],
    whole_static_libs: ["android.hardware.automotive.vehicle@2.0-manager-lib"],
    srcs: [
        "tests/fuzzer/VehicleManager_fuzzer.cpp",
    ],
    shared_libs: [
        "libbase",
        "libcutils",
        "libbinder_ndk",
    ],
    header_libs: ["libbase_headers"],
    local_include_dirs: [
        "common/include",
        "tests",
    ],
    fuzz_config: {
        cc: [
            "android-media-fuzzing-reports@google.com",
        ],
        componentid: 533764,
    },
}
prebuilt_etc {
    name: "properties.txt",
    vendor: true,
    src: ":vehicle-property-config",
}
filegroup {
    name: "vehicle-property-config",
    srcs: ["properties.txt"],
}

prebuilt_etc {
    name: "gecko-prop-init.json",
    vendor: true,
    src: ":vehicle-property-json",
}
filegroup {
    name: "vehicle-property-json",
    srcs: ["gecko-prop-init.json"],
}

prebuilt_etc {
    name: "ecu-config.json",
    vendor: true,
    src: ":vehicle-ecu-config-json",
}
filegroup {
    name: "vehicle-ecu-config-json",
    srcs: ["ecu-config.json"],
}

prebuilt_etc {
    name: "gecko-vehicle-config.json",
    vendor: true,
    src: ":vehicle-vehicle-config",
}
filegroup {
    name: "vehicle-vehicle-config",
    srcs: ["gecko-vehicle-config.json"],
}

cc_binary {
    name: "EthernetVaryMsgServer",
    srcs: [
        "impl/vhal_v2_0/EthernetVaryMsgServer.cpp",
    ],
    cflags: [
        "-std=c++11",
    ],
    shared_libs: [
        "liblog",
    ],
}

cc_binary {
    name: "uart_stress_test",
    srcs: [
        "uart_stress_test.c",
    ],
    cflags: [
        "-std=c99",
    ],
    shared_libs: [
        "liblog",
    ],
}
