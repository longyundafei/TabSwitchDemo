package com.bihu.carcontrol.common.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAINTAIN_BEAN".
*/
public class MaintainBeanDao extends AbstractDao<MaintainBean, Long> {

    public static final String TABLENAME = "MAINTAIN_BEAN";

    /**
     * Properties of entity MaintainBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Description = new Property(1, String.class, "description", false, "DESCRIPTION");
        public final static Property Timestamp = new Property(2, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property IsMaintainTimeSet = new Property(3, Boolean.class, "isMaintainTimeSet", false, "IS_MAINTAIN_TIME_SET");
        public final static Property MaintainTimeSetTime = new Property(4, Long.class, "maintainTimeSetTime", false, "MAINTAIN_TIME_SET_TIME");
        public final static Property MaintainTimeSetValue = new Property(5, Integer.class, "maintainTimeSetValue", false, "MAINTAIN_TIME_SET_VALUE");
        public final static Property IsMaintainMileageSet = new Property(6, Boolean.class, "isMaintainMileageSet", false, "IS_MAINTAIN_MILEAGE_SET");
        public final static Property MaintainMileageSetTime = new Property(7, Long.class, "maintainMileageSetTime", false, "MAINTAIN_MILEAGE_SET_TIME");
        public final static Property MaintainMileageSetValue = new Property(8, Integer.class, "maintainMileageSetValue", false, "MAINTAIN_MILEAGE_SET_VALUE");
    }


    public MaintainBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MaintainBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAINTAIN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DESCRIPTION\" TEXT," + // 1: description
                "\"TIMESTAMP\" INTEGER," + // 2: timestamp
                "\"IS_MAINTAIN_TIME_SET\" INTEGER," + // 3: isMaintainTimeSet
                "\"MAINTAIN_TIME_SET_TIME\" INTEGER," + // 4: maintainTimeSetTime
                "\"MAINTAIN_TIME_SET_VALUE\" INTEGER," + // 5: maintainTimeSetValue
                "\"IS_MAINTAIN_MILEAGE_SET\" INTEGER," + // 6: isMaintainMileageSet
                "\"MAINTAIN_MILEAGE_SET_TIME\" INTEGER," + // 7: maintainMileageSetTime
                "\"MAINTAIN_MILEAGE_SET_VALUE\" INTEGER);"); // 8: maintainMileageSetValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAINTAIN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MaintainBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(2, description);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(3, timestamp);
        }
 
        Boolean isMaintainTimeSet = entity.getIsMaintainTimeSet();
        if (isMaintainTimeSet != null) {
            stmt.bindLong(4, isMaintainTimeSet ? 1L: 0L);
        }
 
        Long maintainTimeSetTime = entity.getMaintainTimeSetTime();
        if (maintainTimeSetTime != null) {
            stmt.bindLong(5, maintainTimeSetTime);
        }
 
        Integer maintainTimeSetValue = entity.getMaintainTimeSetValue();
        if (maintainTimeSetValue != null) {
            stmt.bindLong(6, maintainTimeSetValue);
        }
 
        Boolean isMaintainMileageSet = entity.getIsMaintainMileageSet();
        if (isMaintainMileageSet != null) {
            stmt.bindLong(7, isMaintainMileageSet ? 1L: 0L);
        }
 
        Long maintainMileageSetTime = entity.getMaintainMileageSetTime();
        if (maintainMileageSetTime != null) {
            stmt.bindLong(8, maintainMileageSetTime);
        }
 
        Integer maintainMileageSetValue = entity.getMaintainMileageSetValue();
        if (maintainMileageSetValue != null) {
            stmt.bindLong(9, maintainMileageSetValue);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MaintainBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(2, description);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(3, timestamp);
        }
 
        Boolean isMaintainTimeSet = entity.getIsMaintainTimeSet();
        if (isMaintainTimeSet != null) {
            stmt.bindLong(4, isMaintainTimeSet ? 1L: 0L);
        }
 
        Long maintainTimeSetTime = entity.getMaintainTimeSetTime();
        if (maintainTimeSetTime != null) {
            stmt.bindLong(5, maintainTimeSetTime);
        }
 
        Integer maintainTimeSetValue = entity.getMaintainTimeSetValue();
        if (maintainTimeSetValue != null) {
            stmt.bindLong(6, maintainTimeSetValue);
        }
 
        Boolean isMaintainMileageSet = entity.getIsMaintainMileageSet();
        if (isMaintainMileageSet != null) {
            stmt.bindLong(7, isMaintainMileageSet ? 1L: 0L);
        }
 
        Long maintainMileageSetTime = entity.getMaintainMileageSetTime();
        if (maintainMileageSetTime != null) {
            stmt.bindLong(8, maintainMileageSetTime);
        }
 
        Integer maintainMileageSetValue = entity.getMaintainMileageSetValue();
        if (maintainMileageSetValue != null) {
            stmt.bindLong(9, maintainMileageSetValue);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MaintainBean readEntity(Cursor cursor, int offset) {
        MaintainBean entity = new MaintainBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // description
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // timestamp
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isMaintainTimeSet
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // maintainTimeSetTime
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // maintainTimeSetValue
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isMaintainMileageSet
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // maintainMileageSetTime
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // maintainMileageSetValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MaintainBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTimestamp(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setIsMaintainTimeSet(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setMaintainTimeSetTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setMaintainTimeSetValue(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIsMaintainMileageSet(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setMaintainMileageSetTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setMaintainMileageSetValue(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MaintainBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MaintainBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MaintainBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
